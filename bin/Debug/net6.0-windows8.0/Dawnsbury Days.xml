<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dawnsbury Days</name>
    </assembly>
    <members>
        <member name="T:Dawnsbury.Audio.SfxName">
            <summary>
            Identifies a sound effect file name. The directory <c>audio/SoundEffects</c> is searched for files with the same name as the enum member. 
            </summary>
        </member>
        <member name="T:Dawnsbury.Audio.Sfxs">
            <summary>
            Manages playing of sounds, voices and music.
            </summary>
        </member>
        <member name="P:Dawnsbury.Audio.Sfxs.WindowActive">
            <summary>
            True if the game window is the foreground focused Windows application.
            </summary>
        </member>
        <member name="P:Dawnsbury.Audio.Sfxs.WithinCutscene">
            <summary>
            True if music is currently playing at lower volume because of a cutscene.
            </summary>
        </member>
        <member name="P:Dawnsbury.Audio.Sfxs.SfxFilenames">
            <summary>
            Gets the dictionary that maps <see cref="T:Dawnsbury.Audio.SfxName"/> to the full paths to the sound files, relative to Dawnsbury Days's active directory (the "Data" directory).
            </summary>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.LoadSfxs">
            <summary>
            Loads all sound effects into memory during the splash screen.
            </summary>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.AssignFilenameToSfxName(Dawnsbury.Audio.SfxName,System.String)">
            <summary>
            Registers a new <see cref="T:Dawnsbury.Audio.SfxName"/> to be playable, and causes it to play the  given sound file (including path and extension). Mods should use <see cref="M:Dawnsbury.Modding.ModManager.RegisterNewSoundEffect(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.UpdateVolumes">
            <summary>
            Updates volumes of volume groups (master, voice, sound effect, music) based on settings and on whether the window is currently active.
            </summary>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.Play(Dawnsbury.Audio.SfxName,System.Single)">
            <summary>
            Plays a new instance of a sound effect.
            </summary>
            <param name="effect">Sound effect to play.</param>
            <param name="volume">Volume adjustment (0-1, default 1) compared to the sound effect's base volume.</param>
            <returns>An instance of the sound effect that can be stopped, or null if no sound effect was played.</returns>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.Play(System.Nullable{Dawnsbury.Audio.SfxName},System.Single)">
            <summary>
            Plays a new instance of a sound effect, if not null.
            </summary>
            <param name="effect">Sound effect to play, or null.</param>
            <param name="volume">Volume adjustment (0-1, default 1) compared to the sound effect's base volume.</param>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.Play(System.String)">
            <summary>
            Plays a new instance of a voice line.
            </summary>
            <param name="voiceFileName">Name of a voice file, including file extension, in the <c>audio/Voice</c> subdirectory.</param>
            <returns>An instance of the voice line that can be stopped.</returns>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.BeginSong(Dawnsbury.Audio.Songname)">
            <summary>
            Stops the currently playing music track and starts playing a new one, without fade-in.
            </summary>
            <param name="song">The music track to play.</param>
        </member>
        <member name="P:Dawnsbury.Audio.Sfxs.CurrentMusic">
            <summary>
            Returns the currently playing instance of the music track that's currently playing, if any.
            </summary>
        </member>
        <member name="P:Dawnsbury.Audio.Sfxs.SuppressMusicChanges">
            <summary>
            If true, then music should not change as game phases begin and end.
            </summary>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.SlideIntoSong(Dawnsbury.Audio.Songname)">
            <summary>
            Cross-fades out of the currently playing music track, if any, into a new music track.
            </summary>
            <param name="song">The music track to play.</param>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.SlideIntoSong(FmodForFoxes.Sound)">
            <summary>
            Cross-fades out of the currently playing music track, if any, into a new music track.
            </summary>
            <param name="newSong">The music track to play, given as a Sound object, which allows for resuming a previously loaded music track.</param>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.Silence">
            <summary>
            Immediately stops all music and voice.
            </summary>
        </member>
        <member name="M:Dawnsbury.Audio.Sfxs.StopVoice">
            <summary>
            Immediately stops all voice.
            </summary>
        </member>
        <member name="T:Dawnsbury.Audio.Songname">
            <summary>
            Identifies a background music track. All background music tracks are hardcoded.
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.Enums">
            <summary>
            Contains static methods useful for dealing with enums.
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.ExtensionMethods">
            <summary>
            Provides various extension methods.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.Alpha(Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Returns the given color with modified alpha component.
            </summary>
            <param name="color">The base color.</param>
            <param name="alpha">New alpha component (0 to 255).</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.Extend(Microsoft.Xna.Framework.Rectangle,System.Int32,System.Int32)">
            <summary>
            Pushes the rectangle out by the horizontal and vertical amount specified, then returns this new rectangle. You may deflate by using negative values. Each side will be pushed out by the given
            number of pixels. For example, an inflation of 10 will increase the width of the rectangle by 20.
            </summary>
            <param name="rectangle">The inflated rectangle.</param>
            <param name="horizontalInflation">Extend by this amount horizontally.</param>
            <param name="verticalInflation">Extend by this amount vertically.</param>
            <returns></returns>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.MoveToRight(Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            Returns a rectangle moved to the right.
            </summary>
            <param name="rectangle">The original rectangle.</param>
            <param name="amount">Move rectangle to the right by this amount of pixels.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.GetRandom``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Returns a randomly selected element of the list. If the list is empty, it returns null.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.Exponentiate(System.Int32,System.UInt32)">
            <summary>
            Performs integer exponentiation.
            </summary>
            <param name="basis">The base.</param>
            <param name="power">The exponent.</param>
            <remarks>Code by Vlix - http://stackoverflow.com/questions/383587/how-do-you-do-integer-exponentiation-in-c
            </remarks>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.ApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Compares two floats and returns true if they are equal. Takes into account rounding errors when manipulating floating-point numbers.
            </summary>
            <param name="me">The primary number.</param>
            <param name="compareToThis">The second number.</param>
            <returns>true, if the two numbers are approximately equal (taking into account rounding errors). False otherwise.</returns>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.ApproximatelyEqual(System.Double,System.Double)">
            <summary>
            Compares two double-precision numbers and returns true if they are equal. Takes into account rounding errors when manipulating floating-point numbers.
            </summary>
            <param name="me">The primary number.</param>
            <param name="compareToThis">The second number.</param>
            <returns>true, if the two numbers are approximately equal (taking into account rounding errors). False otherwise.</returns>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.Clamp``1(``0,``0,``0)">
            <summary>
            Returns the object, or the minimum or maximum if the object exceeds the range.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.WithPlus(System.Int32)">
            <summary>
            Adds a "+" before non-negative integers. For example, "43" becomes "+43", "0" becomes "+0", "-7" stays "-7".
            </summary>
            <param name="integer">The integer to convert to string.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.Uncapitalize(System.String)">
            <summary>
            Returns <paramref name="text"/>, except that the first letter is made lowercase. (e.g. "You won!" => "you won!")
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.Greenify(System.Int32)">
            <summary>
            Adds a "+" before non-negative integers. For example, "43" becomes "+43", "0" becomes "+0", "-7" stays "-7".
            Also makes positive integer green and negative integers red.
            </summary>
            <param name="integer">The integer to convert to string.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.InvokeIfNotNull``5(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task},``0,``1,``2,``3,``4)">
            <summary>
            Invokes a delegate with the given arguments and returns its task, if the delegate is not null, otherwise returns a completed task. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.InvokeIfNotNull``4(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task},``0,``1,``2,``3)">
            <summary>
            Invokes a delegate with the given arguments and returns its task, if the delegate is not null, otherwise returns a completed task. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.InvokeIfNotNull``3(System.Func{``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2)">
            <summary>
            Invokes a delegate with the given arguments and returns its task, if the delegate is not null, otherwise returns a completed task. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.InvokeIfNotNull``2(System.Func{``0,``1,System.Threading.Tasks.Task},``0,``1)">
            <summary>
            Invokes a delegate with the given arguments and returns its task, if the delegate is not null, otherwise returns a completed task. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.InvokeIfNotNull``1(System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
            Invokes a delegate with the given argument and returns its task, if the delegate is not null, otherwise returns a completed task. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ExtensionMethods.InvokeIfNotNull(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invokes a delegate with the given argument and returns its task, if the delegate is not null, otherwise returns a completed task. 
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.GamePhase">
            <summary>
            An abstract class that represents a layer of UI. These layers ("phases") are stacked on top of each other. All of them get drawn, but only the top one gets updated.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.GamePhase.ScheduledForElimination">
            <summary>
            Gets or sets the flag that determines whether this phase will be deleted during the next Root.Update() cycle.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.GamePhase.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Game,System.Single)">
            <summary>
            Virtual method. Override this to perform drawing this phase. The base method will draw all UIElements of this phase. 
            This method will be called regardless of whether this phase is on top of the stack.
            </summary>
            <param name="sb">The spriteBatch to use. The method assumes the spriteBatch is already Begun.</param>
            <param name="game">The game.</param>
            <param name="elapsedSeconds">Seconds elapsed since last draw cycle.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.GamePhase.Update(Microsoft.Xna.Framework.Game,System.Single)">
            <summary>
            Virtual method. Override this to perform updates in this phase. This method will only be called if this phase is on top of stack. The base method causes all UI Elements in the UIElement list to update.
            </summary>
            <param name="game">The game.</param>
            <param name="elapsedSeconds">Seconds elapsed since last update cycle.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.GamePhase.Initialize(Microsoft.Xna.Framework.Game)">
            <summary>
            Performs any initialization code. Base method is empty.
            </summary>
            <param name="game">The game.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.GamePhase.Destruct(Microsoft.Xna.Framework.Game)">
            <summary>
            Performs any destruction code, then causes the phase to be flagged for removal from stack.
            Base method causes this by setting the ScheduledForElimination flag.
            </summary>
            <param name="game">The game.</param>
        </member>
        <member name="T:Dawnsbury.Auxiliary.ImprovedStack`1">
            <summary>
            Basically an improved list that provides access to the entire array, but provides methods for Push, Pop and Peek. However, stack pop operation is O(n). Use this structure only for small collections.
            </summary>
            <typeparam name="T">The type of elements on the stack.</typeparam>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ImprovedStack`1.Peek">
            <summary>
            Returns the top of the stack, without removing it.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ImprovedStack`1.Push(`0)">
            <summary>
            Pushes the item to the top of the stack.
            </summary>
            <param name="t">Item to push on top of stack.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.ImprovedStack`1.Pop">
            <summary>
            Returns the item at the top of the stack and removes it, or returns null or throws an exception if the stack is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dawnsbury.Auxiliary.Library">
            <summary>
            Contains some textures and font. 
            This is a DrawableGameComponent because it needs to load content from an alternate content library.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Library.Pixel">
            <summary>
            A 1x1 white square.
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.ModifierKey">
            <summary>
            A meta-key pressed alongside another key.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.ModifierKey.Ctrl">
            <summary>
            Any Control key.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.ModifierKey.Shift">
            <summary>
            Any Shift key.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.ModifierKey.Alt">
            <summary>
            Any Alt key.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.ModifierKey.Windows">
            <summary>
            Any Windows key.
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.Primitives">
            <summary>
            This class contains methods for drawing 2D primitives. 
            WARNING! Before using it, you must call the Primitives.Init() function. This method is called automatically by Root.Init(), however.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.FillRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a filled rectangle without borders, scaled, and returns the native rectangle.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draw the border of a rectangle, without filling it in.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="color">Color of the border.</param>
            <param name="thickness">Number of pixels (line width)</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawAndFillRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draw a filled rectangle with a border.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="innerColor">The fill-in color.</param>
            <param name="outerColor">The border color.</param>
            <param name="thickness">Border width.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawPointNative(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draws a square centered on the specified position.
            </summary>
            <param name="position">Center of the square.</param>
            <param name="color">Color of the square.</param>
            <param name="size">VideoWidth of the square.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draws a line between two points in 2D space.
            </summary>
            <param name="startPoint">Line starts at this point.</param>
            <param name="endPoint">Line ends at this point.</param>
            <param name="color">Color of the line.</param>
            <param name="width">VideoWidth of the line in pixels.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawImage(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draws a Texture2D, possibly preserving aspect-ratio (based on parameters).
            </summary>
            <param name="texture">The texture to draw.</param>
            <param name="rectangle">The rectangle to fill with the texture.</param>
            <param name="color">Tint the image with this color. A value of null (default) means no tinting (i.e. white).</param>
            <param name="scale">If true, the drawing will preserve aspect ratio.</param>
            <param name="scaleUp">If true, and we preserve aspect ratio, then the image will be scaled up if necessary.</param>
            <param name="scaleBgColor">The color that fills the background in case aspect-ratio is preserved. By default, this is null, i.e. no color.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawRoundedRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draw the border of a rounded rectangle.
            WARNING! Methods for drawing rounded rectangles store rectangle mask textures in memory for performance reasons.
            If you draw multiple rounded rectangles of different sizes, you may have both performance and memory problems.
            You may, however, draw a rectangle of the same dimensions multiple times on different areas of the screen without problems.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.FillRoundedRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a filled rounded rectangle without a border.
            WARNING! Methods for drawing rounded rectangles store rectangle mask textures in memory for performance reasons.
            If you draw multiple rounded rectangles of different sizes, you may have both performance and memory problems.
            You may, however, draw a rectangle of the same dimensions multiple times on different areas of the screen without problems.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawAndFillRoundedRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draws a filled rounded rectangle with a border.
            WARNING! Methods for drawing rounded rectangles store rectangle mask textures in memory for performance reasons.
            If you draw multiple rounded rectangles of different sizes, you may have both performance and memory problems.
            You may, however, draw a rectangle of the same dimensions multiple times on different areas of the screen without problems.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Primitives.CornerSize">
            <summary>
            The size, in pixels, of the rounded corners.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.FillCircle(Microsoft.Xna.Framework.Vector2,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a filled circle. 
            WARNING! This and the DrawCircle method store circle textures in memory for performance reasons.
            If you draw multiple circles of different radii, you may have both performance and memory problems.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.DrawCircle(Microsoft.Xna.Framework.Vector2,System.Int32,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draws an outline of a circle. 
            WARNING! This and the FillCircle method store circle textures in memory for performance reasons.
            If you draw multiple circles of different radii, you may have both performance and memory problems.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.ClearCircleCache">
            <summary>
            Clears all cached Circle textures. This will clear space from memory, but drawing circles will take longer. Then runs garbage collector.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Primitives.Init(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This method is called automatically from Root.Init(). It will enable the use of this static class.
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.R">
            <summary>
            Provides randomness.
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.Resolution">
            <summary>
            Represents a display resolution.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Resolution.Width">
            <summary>
            Gets or sets the resolution height.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Resolution.Height">
            <summary>
            Gets or sets the resolution height.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Resolution.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new resolution class instance.
            </summary>
            <param name="width">Resolution width.</param>
            <param name="height">Resolution height.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Resolution.CompareTo(Dawnsbury.Auxiliary.Resolution)">
            <summary>
            A resolution is less than another resolution if its width is less, or if its width is identical and its height is less.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Resolution.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Resolution.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Resolution.ToString">
            <summary>
            Returns the string "(width)x(height)". For example, 1024x768.
            </summary>
        </member>
        <member name="T:Dawnsbury.Auxiliary.Root">
            <summary>
            This static class contains much information used by various components of the Auxiliary engine. 
            In addition, it contains many public methods such as Init() or DrawOverlay().
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.Screen">
            <summary>
            Returns the actual physical resolution the game should render to, excluding the pillarbox areas.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Root.PhaseStack">
            <summary>
            The topmost GamePhase can be interacted with. All phases on the stack are drawn (beneath).
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.CurrentPhase">
            <summary>
            Gets the game phase at the top of the stack or pushes a new game phase to the top of the stack.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Root.Keyboard_OldState">
            <summary>
            Keyboard state in the previous Update() cycle.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Root.Keyboard_NewState">
            <summary>
            Keyboard state in the current Update() cycle.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Root.Mouse_OldState">
            <summary>
            Mouse state in the previous Update() cycle.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.Mouse_NewState">
            <summary>
            Mouse state in the current Update() cycle.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Root.Execute_DoNotLoadXxlTextures">
            <summary>
            Will not load the big circle texture necessary for drawing circles. This will speed up loading time and free memory.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Root.Display_DisplayFpsCounter">
            <summary>
            Displays the FPS counter as an overlay.
            </summary>
        </member>
        <member name="F:Dawnsbury.Auxiliary.Root.Display_DisplayFpsCounterWhere">
            <summary>
            The position, in pixels, of the FPS counter overlay.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.ScreenWidth">
            <summary>
            Gets the true width of the drawable area of the game window.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.NativeScreenWidth">
            <summary>
            Gets the full width of the game window, including the black bars at the left and right.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.NativeScreenHeight">
            <summary>
            Gets the full height of the game window. This should always be the same as <see cref="P:Dawnsbury.Auxiliary.Root.ScreenHeight"/>.
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.ScreenHeight">
            <summary>
            Gets the true height of the drawable area of the game window.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.PushPhase(Dawnsbury.Auxiliary.GamePhase)">
            <summary>
            Adds new game on top of the stack and initializes it.
            </summary>
            <param name="phase">The phase to put on stack.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.PopFromPhase">
            <summary>
            Calls the "Destruct" method of the phase, which should, by default, set the ScheduledForElimination flag.
            The phase will be popped from stack only later, not immediately.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.IsMouseOver(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Returns true if the mouse cursor is currently inside the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle to check for mouse cursor's position</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.SetResolution(Dawnsbury.Auxiliary.Resolution,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets and applies the new resolution immediately.
            </summary>
            <param name="gameResolution">Resolution to apply.</param>>
            <param name="trueResolution">Resolution to apply.</param>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.IsFullscreen">
            <summary>
            Gets or sets whether the game is in fullscreen mode.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.DrawPhase(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws all phases on the stack using the Root spritebatch, in stack order.
            </summary>
            <param name="gameTime">gameTime parameter from the Game.Draw() method.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Call this from Game.Update(). Updates keyboard and mouse states, updates all phases, then erases phases scheduled for elimination, and updates toasts and FPS counter.
            </summary>
            <param name="gameTime">gameTime parameter from the Game.Update() method.</param>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.WasKeyPressed(Microsoft.Xna.Framework.Input.Keys,Dawnsbury.Auxiliary.ModifierKey[])">
            <summary>
            Returns true only if a key was just pressed down and released.
            </summary>
            <param name="key">We test whether this key was pressed and released</param>
            <param name="modifiersPressed">This combination of keys must have been pressed at the time of release</param>
            <returns></returns>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.WasMouseLeftClick">
            <summary>
            Gets or sets. This is set to true or false depending on whether a left mouse click occured since last calling Root.Update().
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.WasMouseLeftBeginPress">
            <summary>
            Gets or sets. This is set to true or false depending on whether the left mouse button became pressed since last calling Root.Update().
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.WasMouseMiddleClick">
            <summary>
            Gets or sets. This is set to true or false depending on whether a middle mouse click occured since last calling Root.Update().
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.WasMouseMiddleBeginPress">
            <summary>
            Gets or sets. This is set to true or false depending on whether the middle mouse button became pressed since last calling Root.Update().
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.WasMouseRightClick">
            <summary>
            Gets or sets. This is set to true or false depending on whether a right mouse click occured since last calling Root.Update().
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.WasMouseRightBeginPress">
            <summary>
            Gets or sets. This is set to true or false depending on whether the right mouse button became pressed since last calling Root.Update().
            </summary>
        </member>
        <member name="P:Dawnsbury.Auxiliary.Root.Screen2560x1440">
            <summary>
            Returns the rectangle (0,0,2560,1440).
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.ConsumeLeftClick">
            <summary>
            Sets WasMouseLeftClick to false.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.ConsumeMiddleClick">
            <summary>
            Sets WasMouseMiddleClick to false.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.ConsumeRightClick">
            <summary>
            Sets WasMouseRightClick to false.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Root.Init(Dawnsbury.MainGame,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GraphicsDeviceManager,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Binds this Root class to the graphics device from the game, and also sets the resolution and fullscreen/windowed mode. You must call Root.Init() before using any other Auxiliary functions.
            </summary>
            <param name="game">The primary Game class containg the SpriteBatch and GraphicsDeviceManager.</param>
            <param name="spriteBatch">The spriteBatch Auxiliary will use to draw. Auxiliary will assume all calls to its method (that could potentially draw something) are inside spriteBatch.Begin() and spriteBatch.End() calls.</param>
            <param name="graphics">The primary GraphicsDeviceManager from the Game class.</param>
            <param name="contentManager">The ContentManager used to load the pixel texture.</param>
        </member>
        <member name="T:Dawnsbury.Auxiliary.Utilities">
            <summary>
            Provides several static utility functions related to XNA and graphics.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Utilities.LoadTextureAtRuntime(System.String)">
            <summary>
            Loads an image from the given filename. Warning!: The Auxiliary.Root class must already be initialized with Root.Init() for this overload to work.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Utilities.LoadTextureAtRuntime(System.String,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Loads an image from the given filename.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Utilities.ScaleRectangle(Microsoft.Xna.Framework.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Scales a rectangle identified by 'originalWidth' and 'originalHeight' to fill the area of 'target', except that its aspect ratio must be preserved. The returned rectangle is centered on the center of the target.
            </summary>
            <param name="target">The rectangle to be filled in.</param>
            <param name="originalWidth">VideoWidth of the scaled rectangle.</param>
            <param name="originalHeight">Height of the scaled rectangle.</param>
            <param name="alsoScaleUp">Even if the scaled rectangle is smaller in all dimensions than the target, it will still be scaled (up, in this case).</param>
            <returns></returns>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Utilities.GetSupportedResolutions">
            <summary>
            Gets the list of resolutions supported by the computer. It may not be accurate.
            </summary>
        </member>
        <member name="M:Dawnsbury.Auxiliary.Utilities.GetCommonResolutions">
            <summary>
            Returns a hard-coded list of common PC monitor resolutions.
            </summary>
        </member>
        <member name="P:Dawnsbury.Campaign.Encounters.Encounter.CharacterLevel">
            <summary>
            The level of player characters, which is suggested by the encounter itself but may be overridden by the player in random encounter mode.
            </summary>
        </member>
        <member name="P:Dawnsbury.Campaign.Encounters.Encounter.IsFairFight">
            <summary>
            True if the party is fighting this encounter in free encounter mode at the correct level or below, and within the wealth-by-level guidelines.
            </summary>
        </member>
        <member name="M:Dawnsbury.Campaign.Encounters.Encounter.ModifyCreatureSpawningIntoTheEncounter(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Applies to each creature as it begins to exist, whether it exists from the very beginning, is summoned, is spawned later or is a pet.
            </summary>
        </member>
        <member name="F:Dawnsbury.Campaign.Encounters.TriggerName.StartOfEncounter">
            <summary>
            Triggers after the introductory cutscene of an encounter ends.
            </summary>
        </member>
        <member name="F:Dawnsbury.Campaign.Encounters.TriggerName.AllEnemiesDefeated">
            <summary>
            Triggers as a state-based effect when there are no enemies on the battlefield.
            </summary>
        </member>
        <member name="F:Dawnsbury.Campaign.Encounters.TriggerName.TouchCandelabra">
            <summary>
            Triggers when you touch the Golden Candelabra in <see cref="T:Dawnsbury.Campaign.Encounters.Quest_for_the_Golden_Candelabra.S1E5GoldenCandelabra"/>.
            </summary>
        </member>
        <member name="F:Dawnsbury.Campaign.Encounters.TriggerName.InitiativeCountZero">
            <summary>
            Triggers at the end of each combat round.
            </summary>
        </member>
        <member name="P:Dawnsbury.Campaign.Path.CampaignState.Tags">
            <summary>
            Gets a dictionary of arbitrary key-value objects that are serialized and deserialized with the campaign.
            Mods can use these tags to persist information through the life of a campaign.
            </summary>
        </member>
        <member name="P:Dawnsbury.Campaign.Path.CampaignState.PerDayTags">
            <summary>
            Gets a dictionary of arbitrary key-value objects that are serialized and deserialized with the campaign.
            Mods can use these tags to persist information through an adventuring day.
            The dictionary is cleared whenever the party takes a long rest or enters downtime.
            </summary>
        </member>
        <member name="P:Dawnsbury.Campaign.Path.CampaignStops.CampaignStop.Index">
            <summary>
            The zero-based index of this campaign stop in its adventure path.
            </summary>
        </member>
        <member name="M:Dawnsbury.Campaign.Path.CampaignStops.DawnsburyStop.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Dawnsbury.Campaign.Path.CampaignStops.CampaignStop"/> that represents Downtime.
            </summary>
            <param name="flavorText">Text in italics to be shown at the top.</param>
            <param name="dawnsburyStopIndex">One-based index of the stop. The stop before the first chapter is 1. The stop in Dawnsbury-under-the-Sea is 5. The stop at the end of the campaign is 6.</param>
            <param name="shopLevel">Maximum level of items that can be purchased at the shop during this downtime.</param>
            <param name="dawnsburyUnderTheSea">Whether this represents Dawnsbury-under-the-Sea instead of normal Dawnsbury.</param>
            <param name="name">Name of this downtime stop (usually, "Dawnsbury").</param>
        </member>
        <member name="P:Dawnsbury.Campaign.Path.HeroExpendedResources.SpontaneousSpellSlotsUsedUp">
            <summary>
            Legacy storage of used up spontaneous spell slots. This is now only read from old save files, never written.
            </summary>
        </member>
        <member name="P:Dawnsbury.Campaign.Path.HeroExpendedResources.PreparedSpellsUsedUp">
            <summary>
            Legacy storage of used up prepared spells. This is now only read from old save files, never written.
            </summary>
        </member>
        <member name="F:Dawnsbury.Constants.ACTION_COST_VARIABLE_ACTION_COST_ONE_TWO_OR_THREE">
            <summary>
            The user can choose to spend 1 action, 2 actions or 3 actions on this.
            </summary>
        </member>
        <member name="F:Dawnsbury.Constants.ACTION_COST_REACTION">
            <summary>
            This spell cannot be cast. It can only be activated as a reaction. See the spell Blood Vendetta for an example.
            </summary>
        </member>
        <member name="F:Dawnsbury.Constants.ACTION_COST_VARIABLE_ACTION_COST_ONE_OR_TWO">
            <summary>
            The user can choose to spend 1 action or 2 actions on this.
            </summary>
        </member>
        <member name="F:Dawnsbury.Constants.ACTION_COST_VARIABLE_ACTION_COST_TWO_OR_THREE">
            <summary>
            The user can choose to spend 2 actions or 3 actions on this.
            </summary>
        </member>
        <member name="F:Dawnsbury.Constants.ACTION_COST_VARIABLE_ACTION_COST_TWO_THREE_OR_SIX">
            <summary>
            The user can choose to spend 2 actions, 3 actions or 6 actions on this. If they choose 6 actions, then the spell will still expend 3 actions only, and it's your responsibility as the spell creator to give the user
            an action they can use next turn to complete the spell.
            </summary>
        </member>
        <member name="M:Dawnsbury.Constants.DetermineLumpSumGold(System.Int32)">
            <summary>
            Gets the amount of gold a party member is expected to have at a given level.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CharacterBuilder.CalculatedCharacterSheetValues.Tags">
            <summary>
            A place where mods can store arbitrary data during the construction of a character.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CharacterBuilder.CalculatedCharacterSheetValues.AdditionalClassTraits">
            <summary>
            Additional class traits granted to this character by an archetype.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CharacterBuilder.CalculatedCharacterSheetValues.RangerBenefitsToCompanion">
            <summary>
            Adds benefits to the ANIMAL COMPANION owned by the RANGER.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.CalculatedCharacterSheetValues.SetProficiency(Dawnsbury.Core.Mechanics.Enumerations.Trait,Dawnsbury.Core.Mechanics.Enumerations.Proficiency)">
            <summary>
            Increases the proficiency you have with the TRAIT to at least PROFICIENCY LEVEL, if it's not already higher.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CharacterBuilder.CharacterSheet.Inventory">
            <summary>
            Represents the inventory currently being edited.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CharacterBuilder.CharacterSheet.CampaignInventory">
            <summary>
            Represents the inventory that's used by this character if this character is in a campaign.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.CharacterSheet.Recalculate(System.Boolean)">
            <summary>
            Refreshes the calculated character sheet, up to <see cref="P:Dawnsbury.Core.CharacterBuilder.CharacterSheet.MaximumLevel"/>, deleting any choices along the way for which you don't meet prerequisites at the end
            of the level where you took them.
            </summary>
            <param name="keepIllegalItems">If true, then this recalculate should not make any persistent changes to the character sheet by deleting choices.</param>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.CharacterSheet.Excluding``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            Returns the result of ACTION, as though this character didn't have anything instead of the choice he made at KEY and as though he were only level STOP-AT-LEVEL.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Common.CommonAbilityEffects.Grapple(Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Creatures.Creature,System.Boolean)">
            <summary>
            Causes the TARGET to become grabbed (or RESTRAINED) by the GRAPPLER.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Common.CommonAbilityEffects.CombineDamageForThePurposesOfWeaknessesAndResistances(Dawnsbury.Core.Creatures.Creature,System.Func{System.Threading.Tasks.Task})">
            <summary>
            This method currently does nothing because combining weakness and resistance is done automatically; and power which specifically don't want to combine must use target.WeaknessesAndResistances.Reset().
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Kineticist.KineticistImpulses.CreateBasicImpulse(Dawnsbury.Core.CharacterBuilder.Feats.FeatName,Dawnsbury.Core.IllustrationName,Dawnsbury.Core.Mechanics.Enumerations.Trait[],System.Int32,System.String,System.String,Dawnsbury.Core.Mechanics.Targeting.Target)">
            <summary>
            Creates the base <see cref="T:Dawnsbury.Core.CombatActions.CombatAction"/> of an impulse, which the caller can then modify.
            </summary>
            <param name="featName">This feat name will identify both the impulse itself and the feat that adds that impulse. The feat will be created automatically.</param>
            <param name="illustration">Illustration of the impulse.</param>
            <param name="traits">Traits of the impulse.</param>
            <param name="baseLevel">The minimum character level needed to take the feat of this impulse.</param>
            <param name="flavorText">Italics text at the top.</param>
            <param name="rulesText">Rules text of the impulse and the feat.</param>
            <param name="target">Targeting requirements of the impulse.</param>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Spellbook.Spells.CreateModern(Dawnsbury.Display.Illustrations.Illustration,System.String,Dawnsbury.Core.Mechanics.Enumerations.Trait[],System.String,Dawnsbury.Core.StatBlocks.Description.DescriptionDescriptor,Dawnsbury.Core.Mechanics.Targeting.Target,System.Int32,Dawnsbury.Core.Mechanics.Core.SpellSavingThrow)">
            <summary>
            Creates a new combat action that represents a spell.
            </summary>
            <param name="illustration">Icon of the spell that's used both as the default ranged and area cast illustration and for display in the character builder and the bottom bar.</param>
            <param name="spellName">Human-readable name of the spell.</param>
            <param name="traits">Traits of the spell. Make sure to include <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Arcane"/>, <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Occult"/>, <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Primal"/> and/or <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Divine"/> to set the traditions; and make sure to include <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Attack"/> if the spell requires an attack roll; include <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Cantrip"/> if it's a cantrip, and include <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Focus"/> if it's a focus spell. Some traits will be added to the spell automatically, specifically <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Manipulate"/> will be added if the spell costs 2 actions or more.</param>
            <param name="flavorText">A one-line flavorful description of the spell.</param>
            <param name="description">Rules text of the spell.</param>
            <param name="target">Targets of the spell.</param>
            <param name="spellLevel">The level the spell was heightened to. Use the value that you were passed in the argument of the spell factory method.</param>
            <param name="savingThrow">If this spell requires a saving throw, put it here, otherwise put in null.</param>
            <returns>A new instance of the spell that can be displayed or cast.</returns>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.TrueFeatDb.BarbarianFeatsDb.WhyCannotEnterRage(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Returns null if <paramref name="self"/> can enter rage; or a reason why the creature cannot enter rage otherwise.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.TrueFeatDb.Ranger.HasPrey(Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Returns true if ATTACKER is a ranger or ranger's companion and DEFENDER is that ranger's prey.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.Feats.Feat.WithOnSheet(System.Action{Dawnsbury.Core.CharacterBuilder.CalculatedCharacterSheetValues})">
            <summary>
            Adds an instruction to perform an extra ON-SHEET action when this feat is applied at its level.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.Feats.Feat.WithPermanentQEffect(System.String,System.Action{Dawnsbury.Core.Mechanics.QEffect})">
            <summary>
            Causes this feat to add a new permanent QEffect to this character at the beginning of combat.
            </summary>
            <param name="shortRulesText">Short description to show in the ABILITIES section of the stat block that describes this feat. If null, then this feat won't be shown in the ABILITIES section.</param>
            <param name="adjustEmptyQEffect">In this action, you can set up the QEffect, usually by setting its various event-like properties.</param>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.Feats.Feat.WithCustomName(System.String)">
            <summary>
            Consider using <see cref="M:Dawnsbury.Modding.ModManager.RegisterFeatName(System.String,System.String)"/> instead of <see cref="M:Dawnsbury.Core.CharacterBuilder.Feats.Feat.WithCustomName(System.String)"/> for new feats.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.CharacterBuilder.Feats.FeatName.CustomFeat">
            <summary>
            In previous versions of Dawnsbury Days, all modded feats need to use this FeatName. Now, they should no longer use <see cref="F:Dawnsbury.Core.CharacterBuilder.Feats.FeatName.CustomFeat"/> and instead should use
            <see cref="M:Dawnsbury.Modding.ModManager.RegisterFeatName(System.String,System.String)"/> to create a new feat name.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.Feats.TrueFeat.WithAllowsForAdditionalClassTrait(Dawnsbury.Core.Mechanics.Enumerations.Trait)">
            <summary>
            Updates this feat so that it can be taken also by the class or archetype <paramref name="archetypeTrait"/>, in addition to its original class traits.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.Feats.TrueFeat.WithPermanentQEffect(System.String,System.Action{Dawnsbury.Core.Mechanics.QEffect})">
            <inheritdoc cref="M:Dawnsbury.Core.CharacterBuilder.Feats.Feat.WithPermanentQEffect(System.String,System.Action{Dawnsbury.Core.Mechanics.QEffect})"/>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.Inventory.CanBackpackFit(Dawnsbury.Core.Mechanics.Treasure.Item,System.Int32)">
            <summary>
            Returns true if the backpack can fit EXTRA ITEMS number of items after the ITEM BEING TRANSFERRED is removed from the backpack (if it is in the backpack).
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.PreparedSpellSlot.AdmitsSpell(Dawnsbury.Core.CharacterBuilder.Spellcasting.Spell,Dawnsbury.Core.CharacterBuilder.CharacterSheet,Dawnsbury.Core.CharacterBuilder.PreparedSpellSlots)">
            <summary>
            Returns true if this spell slot can hold the given spell in the character builder.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CharacterBuilder.Selections.Options.AbstractSpellSelectionOption.MaximumSpellLevel">
            <summary>
            In this spell selection, you must select a spell of this level or lower.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CharacterBuilder.Selections.Options.SelectionOption.IsOptional">
            <summary>
            If true, then a character sheet is considered complete even if there is no feat, spell or other option selected for this selection option.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CharacterBuilder.Selections.Options.SelectionOption.WithIsOptional">
            <summary>
            Sets the selection option as optional, so that even if there is no feat, spell or other option selected for this selection option, the sheet is considered complete.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.Item">
            <summary>
            The item this action was executed with, if any. For Strikes, this is the weapon or the <see cref="T:Dawnsbury.Core.Mechanics.Treasure.Item"/> that
            represents the unarmed attack. For spells, this can be a fictitious item. Many actions do not have an associated item at all.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.ImpulseInformation">
            <summary>
            If this combat action, represents an impulse, then this has further kineticist-specific information about it; otherwise returns null.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.CastFromScroll">
            <summary>
            If this action is a spell that was cast using an item, this is that item. It could be a scroll or a gate attenuator.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.TooltipCreator">
            <summary>
            Returns the tooltip that this COMBAT ACTION should provide when it targets the CREATURE with the target of the given INDEX (usually 0).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.CreateVariantDescription">
            <summary>
            Creates a more specific spell description for the given ACTION COST (if it depends on action count) and the given SPELL VARIANT (if it depends on variant). 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.SpentActions">
            <summary>
            If this action is a variable-actions-cost spell, then this represents which action cost was chosen. If the spell's action cost was increased by metamagic such as Reach Spell or by Trick Magic Item, then
            this integer excludes that additional cost. (So you may spend three actions, but the SpentActions property will still show only 2.) 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.ActionCostIncreasedByOneByMeta">
            <summary>
            Whether this is an action whose cost was increased by 1 because of metamagic or Trick Magic Item.  
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.CombatAction.CheckResult">
            <summary>
            Gets the check result of this action's main check (active roll or saving throw). If no main check happened, e.g. because of concealment miss chance, then this is a <c>Failure</c>. If there were multiple main checks (e.g. because this is an area-of-effect spell), then this is the result of the last main check performed.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CombatActions.CombatAction.WithEffectOnEachTarget(Dawnsbury.Delegates.EffectOnEachTarget)">
            <summary>
            Adds an effect that is executed against each target of this action. If this action is a self action, this effect executes against the user.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CombatActions.CombatAction.WithSoundEffect(Dawnsbury.Audio.SfxName)">
            <summary>
            Adds a sound effect that is played when a creature uses this action, just after targets are selected.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CombatActions.CombatAction.WithCastsAsAReaction(System.Action{Dawnsbury.Core.Mechanics.QEffect,Dawnsbury.Core.CombatActions.CombatAction})">
            <summary>
            When an encounter begins, adds a new QEFFECT on the spellcaster which expires when you can no longer cast any instance of THIS SPELL. Use this qeffect
            to cause the spell to cast itself when a trigger happens.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnsbury.Core.CombatActions.CombatActionExecution.ExpendResources">
            <summary>
            Returns true if resources were expended and the action should proceed; or false if something unexpected happened and the action should end.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.CombatActions.CombatActionExecution.CheckForMissChance(Dawnsbury.Core.Creatures.Creature,System.Text.StringBuilder)">
            <summary>
            Returns true if the action fizzled due to originator's miss chance or due to concealment miss chance.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.ImpulseInformation.BaseLevel">
            <summary>
            Gets the minimum character level at which this impulse can be invoked.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.CombatActions.StrikeModifiers">
            <summary>
            Holds data that a combat action has that is specific to Strikes, and not combat actions in general. All Strikes have an instance of StrikeModifiers, but no other combat actions do.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.CombatActions.StrikeModifiers.QEffectForStrike">
            <summary>
            Adds this QEffect to the attacker just before the attack, and removes it after. This should not be used for enhancements to attack rolls ideally,
            because they would not display on the tooltip.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Coroutines.Requests.SleepRequest.CanBeClickedThrough">
            <summary>
            If true, then clicking anything or pressing Space or Enter will skip through this wait.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Creatures.Actions">
            <summary>
            Stores what actions are left, and keeps track of turn-level values.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Creatures.Creature">
            <summary>
            Represents a creature, obstacle or hazard during a <see cref="T:Dawnsbury.Core.TBattle"/>, whether a player character, a monster, the Golden Candelabra, a door or a chest (but not a dropped item).
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.WithSpellProficiencyBasedOnSpellAttack(System.Int32,Dawnsbury.Core.Mechanics.Enumerations.Ability)">
            <summary>
            Adds spellcasting proficiency to this monster based on the target number that you want to achieve for a spell attack: the appropriate proficiency will be calculated for you.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.WithBasicCharacteristics">
            <summary>
            Confirms that the creature has the most basic characteristics that most creatures have, that is, it has a skeleton and speaks Common. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.WithCharacteristics(System.Boolean,System.Boolean)">
            <summary>
            Specifies characteristics of a creature that have no in-game effect on their own but are referred to by some spells and abilities.
            </summary>
            <param name="speaksCommon">Does the creature understand Common for the purposes of Demoralize?</param>
            <param name="hasASkeleton">Does the creature have a skeleton for the purposes of Boneshaker?</param>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.WeaknessAndResistance">
            <summary>
            Gets the creature's information about weaknesses, resistances and hardness. A creature's weaknesses, resistances and hardness are fully recalculated at each state check.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.BaseArmor">
            <summary>
            Gets the actual physical armor that the player character is wearing, if any. Monsters don't have base armor.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Armor">
            <summary>
            Gets information about the creature's current armor-derived values, recalculated at each state check. These values may be modified by qeffects with <see cref="P:Dawnsbury.Core.Mechanics.QEffect.ProvidesArmor"/>.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.AnimationData">
            <summary>
            Gets information about animations currently affecting this creature. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.AI">
            <summary>
            Gets the tactics of how this creature should value actions when it's computer-controlled.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Illustration">
            <summary>
            Gets or sets the creature token's illustration.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Battle">
            <summary>
            Gets the battle for which this instance was spawned.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.BaseName">
            <summary>
            Gets the original name of this creature, without the <see cref="P:Dawnsbury.Core.Creatures.Creature.Distinguisher"/> and without adjustments, such as "Orc Warrior".
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.MainName">
            <summary>
            Gets the pure name of this creature, without the <see cref="P:Dawnsbury.Core.Creatures.Creature.Distinguisher"/>, such as "Elite Orc Warrior".
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Distinguisher">
            <summary>
            Gets the name distinguisher in case there are multiple creatures with the same name on the battlefield ('A', 'B', ...).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Name">
            <summary>
            Gets the full display name of this creature, such as "Elite Orc Warrior A".
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.OwningFaction">
            <summary>
            Gets the faction that controls this creature, such as "You" (= Player) or "Enemy".
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Occupies">
            <summary>
            Gets the tile this creature is currently standing on.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Damage">
            <summary>
            Gets the total amount of damage currently marked on this creature.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Actions">
            <summary>
            Gets historical information about any actions this creature has already taken, as well as the number of actions and reactions currently available to it.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.DrainedMaxHPDecrease">
            <summary>
            Maximum HP lost due to being Drained.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.MaxHP">
            <summary>
            Gets the creature's maximum Hit Points.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Proficiencies">
            <summary>
            Gets the creature's proficiencies.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.TemporaryHP">
            <summary>
            Gets the amount of temporary HP this creature has.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.HP">
            <summary>
            Gets the creature's current HP.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.QEffects">
            <summary>
            Gets the QEffects currently owned by this creature. To remove a QEffect from this creature, set its <see cref="P:Dawnsbury.Core.Mechanics.QEffect.ExpiresAt"/> to <see cref="F:Dawnsbury.Core.Mechanics.ExpirationCondition.Immediately"/> so that it's cleared at the next state-check, or call <see cref="M:Dawnsbury.Core.Creatures.Creature.RemoveAllQEffects(System.Func{Dawnsbury.Core.Mechanics.QEffect,System.Boolean})"/>.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.HeldItems">
            <summary>
            Gets the zero, one or two items that the creature is currently holding in its hands.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.UnarmedStrike">
            <summary>
            Gets or sets the creature's primary unarmed strike that the creature uses to make attacks of opportunity if it doesn't have any weapons. A creature may have additional unarmed strikes given by any QEffects it owns with <see cref="P:Dawnsbury.Core.Mechanics.QEffect.AdditionalUnarmedStrike"/>.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.PrimaryItem">
            <summary>
            Gets the item the creature is holding in its left (primary) hand, or any two-handed item it's holding, if any.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.SecondaryItem">
            <summary>
            Gets the item the creature is holding in its right hand, if any.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.CarriedItems">
            <summary>
            Gets the items the creature is keeping in its backpack.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.HasFreeHand">
            <summary>
            Returns true if the creature has at least one free hand.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Skills">
            <summary>
            Gets the creature's skills.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.DetectionStatus">
            <summary>
            Gets the creature's Undetected/Detected flag, as well as information about who it's Hidden from.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Level">
            <summary>
            Gets the creature's level.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.ProficiencyLevel">
            <summary>
            Gets the creature's level for the purposes of calculating its proficiency.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Perception">
            <summary>
            Gets the creature's Perception bonus.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.BaseSpeed">
            <summary>
            Gets the creature's base speed, before modification by armor and QEffects. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Speed">
            <summary>
            Gets the creature's current Speed.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Possibilities">
            <summary>
            Gets the creature's current possibilities. All creatures have possibilities, but the possibilities of nonactive creatures are expired and no longer reflect the current state, and are used only
            for display of (stale) rules stat blocks.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Traits">
            <summary>
            Gets the creature's traits.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Defenses">
            <summary>
            Gets the creature's saves, AC and other possible DCs, such as skill DCs and Perception DC.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.SpawnAsGaia">
            <summary>
            This creature should be spawned onto the map as belonging to Gaia (<see cref="M:Dawnsbury.Core.Creatures.Faction.CreateGaia(Dawnsbury.Core.TBattle)"/>) -- grey inanimate unaligned <see cref="T:Dawnsbury.Core.Creatures.Creature"/>s.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.SpawnAsHumanControlled">
            <summary>
            This creature should be spawned onto the map as belonging to the player (<see cref="M:Dawnsbury.Core.Creatures.Faction.CreateYou(Dawnsbury.Core.TBattle)"/>).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.SpawnAsFriends">
            <summary>
            This creature should be spawned onto the map as belonging to Friends (<see cref="M:Dawnsbury.Core.Creatures.Faction.CreateFriends(Dawnsbury.Core.TBattle)"/>) -- yellow allies.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.VisibleToHumanPlayer">
            <summary>
            Returns true if this creature should be drawn on the battlemap.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Initiative">
            <summary>
            Gets the final initiative count of this creature, including both Perception and the initiative d20 roll. A creature's initiative changes as it delays or as it's moved if it becomes Dying.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Abilities">
            <summary>
            Gets the creature's ability ability modifiers. Creatures don't have ability scores, only character sheets do.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Spellcasting">
            <summary>
            Gets information about the creature's spellcasting, such as its number of focus points, spell slots and spells prepared.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.IsLivingCreature">
            <summary>
            Returns true if this creature counts as a living creature for the purposes of targeting.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Subtitle">
            <summary>
            Gets the creature's title as it should appear during cutscenes (for example, "Mentor of the Dawnsbury Four").
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.DoesNotSpeakCommon">
            <summary>
            Returns true if this creature doesn't speak Common and so player characters take a -4 penalty to Demoralize it.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.PersistentCharacterSheet">
            <summary>
            Gets the creature's character sheet if the creature represents a player character, otherwise returns null. During gameplay, a creature's character sheet is immutable.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.PersistentUsedUpResources">
            <summary>
            During adventure path mode, gets the holder object that's kept in the savefile and maintains the list of exhausted resources of a character, such as spells used, once-per-day abilities used etc. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.MaximumSpellRank">
            <summary>
            Gets the maximum spell level that this creature could cast if it were a spellcaster, so, "1" if it's level 2 or less; "2" if it's level 3 or 4, etc.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Impulsing">
            <summary>
            Gets information about the creature's kineticist impulses.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.CreatureId">
            <summary>
            Identifies this creature's type which can be used by some cinematics or effects.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.ReplacementUnarmedStrike">
            <summary>
            Ephemeral, and reset at every state check. You can set this property to an unarmed strike to replace the creature's basic unarmed strike with this one.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.ReplacementIllustration">
            <summary>
            Ephemeral, and reset at every state check. You can set this property to an illustration to replace a creature's portrait.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.DeathScheduledForNextStateCheck">
            <summary>
            Indicates that this creature has received lethal damage and is scheduled to be removed from the initiative order and the list of creature at next state check.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.AddQEffect(Dawnsbury.Core.Mechanics.QEffect)">
            <summary>
            Adds a new QEffect to this creature.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.DealDirectDamage(Dawnsbury.Core.CombatActions.CombatAction,Dawnsbury.Core.Roller.DiceFormula,Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Mechanics.Core.CheckResult,Dawnsbury.Core.Mechanics.Enumerations.DamageKind)">
            <summary>
            Causes this creature to inflict damage on a target.
            </summary>
            <param name="power">The combat action that caused the damage to be inflicted (can be null).</param>
            <param name="damage">The damage to be dealt (can be null).</param>
            <param name="targetCreature">The creature to receive the damage.</param>
            <param name="checkResult">This is used exclusively to determine whether the damage comes from a critical hit, for the purposes of Dying and effects that trigger on a critical hit only.</param>
            <param name="damageKind">Damage type, for the purposes of weakness and resistance.</param>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.FriendOf(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Returns true if this creature is seen as a friend by <paramref name="anotherCreature"/>.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.FriendOfAndNotSelf(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Returns true if this creature is seen as as a friend by <paramref name="anotherCreature"/> and this isn't that creature.
            </summary>
            <param name="anotherCreature"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.EnemyOf(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Returns true if this creature is seen as an enemy by <paramref name="anotherCreature"/>.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.MakeStrike(Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Mechanics.Treasure.Item,System.Int32)">
            <summary>
            Makes a free Strike against the TARGET with the given WEAPON at MULTIPLE ATTACK PENALTY (or -1 to use the current multiple attack penalty). 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.PrimaryWeapon">
            <summary>
            Gets the weapon in the creature's leftmost hand that has a weapon, or the creature's unarmed attack otherwise, or null if the creature has neither.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.MeleeWeapons">
            <summary>
            Gets the items you can currently use as melee weapons. This can be your actual weapons, your additional unarmed strikes, or your main unarmed strike (usually fist) if you have a free hand.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.PushCreature(Dawnsbury.Core.Creatures.Creature,System.Int32)">
            <summary>
            Pushes the target creature away from this creature the specified number of squares.
            </summary>
            <param name="target">The creature that should be pushed.</param>
            <param name="squareCount">The number of squares it should move.</param>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.PullCreature(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Pulls the target creature towards this creature the specified number of squares.
            </summary>
            <param name="target">The creature that should be pulled.</param>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.StrideAsync(System.String,System.Boolean,System.Boolean,Dawnsbury.Core.Tiles.Tile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Causes the creature's owner to choose a tile to Stride to and this creature to Stride there. This Stride is a subaction and doesn't expend any actions. Returns true if a stride was executed. Returns false if
            the Stride was canceled.
            </summary>
            <param name="topBarText">Full text to display in the topbar while the owner is choosing a tile to Stride to.</param>
            <param name="allowStep">If true and the owner selects a steppable tile, the creature will Step in there instead of Striding in there.</param>
            <param name="maximumFiveFeet"></param>
            <param name="strideTowards">If not null, then this Stride must Stride towards this tile.</param>
            <param name="allowCancel">If true, then the user can right-click to abort the stride, in which case 'false' will be returned from this method..</param>
            <param name="allowPass">If true, then the user can choose to pass on the stride in which case 'false' will be returned from this method.</param>
            <param name="maximumHalfSpeed">If true, then the user can move at maximum half its land speed.</param>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.CarriesItem(Dawnsbury.Core.Mechanics.Treasure.ItemName)">
            <summary>
            Returns true if this creature has an item with the given <paramref name="itemName"/> in its hands or its backpack.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.WieldsItem(Dawnsbury.Core.Mechanics.Enumerations.Trait)">
            <summary>
            Returns true if this creature holds an item with the given trait in its hands.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.WieldsPlusOneWeapon(Dawnsbury.Core.Mechanics.Enumerations.Trait)">
            <summary>
            Returns true if this creature holds a +1 weapon with the given trait in its hands.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.IsWeaponUser">
            <summary>
            Indicates that this creature started this combat with a weapon in hand, and is thus used to using weapons.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Creature.Alive">
            <summary>
            True if this creature is still a legitimate target of post-damage choices, because it's not about to be removed from the game soon.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.WithFeat(Dawnsbury.Core.CharacterBuilder.Feats.FeatName)">
            <summary>
            Adds the given feat to this monster creature. Warning! The creature still doesn't have a character sheet so you must only add feats to creatures
            that don't make use of the character sheet in their <see cref="P:Dawnsbury.Core.CharacterBuilder.Feats.Feat.OnCreature"/> block.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Creature.SetDamageImmediately(System.Int32)">
            <summary>
            Sets this creature's <see cref="P:Dawnsbury.Core.Creatures.Creature.Damage"/> to be <paramref name="damage"/> and cancels all damage animations.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Faction.IsGaia">
            <summary>
            This factions is either <see cref="P:Dawnsbury.Core.Creatures.Faction.IsGaiaFriends"/> or <see cref="P:Dawnsbury.Core.Creatures.Faction.IsGaiaPure"/>.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Faction.IsGaiaFriends">
            <summary>
            This faction is the green "friends" faction, such as Roderick or Morning Dewdrop.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Faction.IsGaiaPure">
            <summary>
            This faction is the grey objects faction.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Faction.IsEnemy">
            <summary>
            This faction is the red enemy faction.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Parts.Proficiencies.Set(Dawnsbury.Core.Mechanics.Enumerations.Trait,Dawnsbury.Core.Mechanics.Enumerations.Proficiency)">
            <summary>
            Increases the proficiency you have with the TRAIT to at least PROFICIENCY LEVEL, if it's not already higher.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Parts.WeaknessAndResistance.ImmunityToCriticalHits">
            <summary>
            This creature is immune to critical hits. [persistent status]
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Parts.WeaknessAndResistance.ImmunityToForcedMovement">
            <summary>
            This creature is immune to being pushed. [persistent status]
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Parts.WeaknessAndResistance.GetAndApplyResistance(Dawnsbury.Core.Mechanics.Enumerations.DamageKind,System.Int32)">
            <summary>
            Applies resistance to the given DAMAGE KIND so that it doesn't apply to future damage events in the same action, up to an amount equal to MAXIMUM USEFUL RESISTANCE.
            Returns the amount of resistance that was actually applied.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Creatures.Spellcasting">
            <summary>
            Contains information about the creature's spellcasting, such as its number of focus points, spell slots and spells prepared. A creature that isn't a spellcaster doesn't have an instance of this class.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Spellcasting.Self">
            <summary>
            Gets the creature owning this instance.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Spellcasting.Sources">
            <summary>
            Gets the list of sources that grant this creature spells. For example, a wizard with a cleric archetype would have a "Wizard" source and a "Cleric" source. The first source in this list is called the primary source. Each spellcaster
            always has at least one source.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Spellcasting.FocusPoints">
            <summary>
            Gets or set the number of focus points of this creature.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.Spellcasting.PrimarySpellcastingSource">
            <summary>
            Gets the primary spellcasting source of this creature. You should probably not used this property. It exists mostly to account for old save files, which store used up resources globally for a creature instead of per class.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Spellcasting.GetSourceByOrigin(Dawnsbury.Core.Mechanics.Enumerations.Trait)">
            <summary>
            Gets the spellcasting source that corresponds to the given class, if any.
            </summary>
            <returns>Spellcasting source given by the given class if this creature has it, or null otherwise.</returns>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Spellcasting.UseUpSpellcastingResources(Dawnsbury.Core.CombatActions.CombatAction)">
            <summary>
            Causes this creature to consume spell slots or focus points, as demanded by the <paramref name="spell"/>.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Creatures.Spellcasting.RevertExpendingOfResources(Dawnsbury.Core.CombatActions.CombatAction)">
            <summary>
            Causes this creature to regain spell slots or focus points that were previously consumed by the <paramref name="spell"/>.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Creatures.SpellcastingKind.Prepared">
            <summary>
            This source uses prepared spellcasting.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Creatures.SpellcastingKind.Spontaneous">
            <summary>
            This source uses spontaneous spellcasting.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Creatures.SpellcastingKind.Innate">
            <summary>
            This source uses prepared innate spellcasting.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Creatures.SpellcastingKind.Legacy">
            <summary>
            Do not use this.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Creatures.SpellcastingSource">
            <summary>
            Represents all spells granted to this creature by a single source. That source can be a class, a multiclass archetype or innate. All spells have a source.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.SpellcastingSource.SpellcastingAbility">
            <summary>
            Gets or sets the spellcasting ability used by this source.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.SpellcastingSource.SpellcastingTradition">
            <summary>
            Gets or sets the spellcasting tradition of this source (<see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Arcane"/>, <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Divine"/>, <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Occult"/> or <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Primal"/>).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.SpellcastingSource.ClassOfOrigin">
            <summary>
            Gets the class trait of the class that is the origin of this source. If this source represents innate spells, use <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Innate"/>.
            If this source represents ancestry spells, you can use the trait of that ancestry.
            This will be displayed to the user in the spellcasting menu if the creature has more than one spellcasting source.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Creatures.SpellcastingSource.Kind">
            <summary>
            Whether this source is prepared, spontaneous or innate. Innate spellcasting works like prepared spellcasting.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.GameLoop.NewStateCheckRequired">
            <summary>
            If true, it means that at the end of the state check, this will be set to false and another state-check will immediately begin. State-check effects can set this to turn
            when they changed something and require the full state-check to rerun.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Intelligence.AI.OverrideDecision">
            <summary>
            If this AI must choose between THE CALCULATED SET OF ALL OPTIONS, it should choose the returned option instead of using its normal usefulness comparer. If you return null, then the normal
            usefulness comparer will be used.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Intelligence.Tactic.Standard">
            <summary>
            The creature chooses the best combat action, preferring to attack twice and move once, and the creature makes use of flanking.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Intelligence.Tactic.Mindless">
            <summary>
            The creature moves towards the closest enemy and Strikes it.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Intelligence.Tactic.PackAttack">
            <summary>
            The creature uses <see cref="F:Dawnsbury.Core.Intelligence.Tactic.Standard"/> tactics, except that it prefer to be adjacent to creature within reach of allies.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Core.ActiveRollSpecification">
            <summary>
            An active roll specification determines what kind of roll the owner of an action must make against each target.
            </summary>
            <param name="DetermineBonus">Returns the calculated attack or non-attack bonus to this d20 roll,
            when the ACTION's OWNER takes the action against the TARGET CREATURE(nullable).</param>
            <param name="DetermineDC">Returns the calculated DC that the active roll must hit or exceed
            when the ACTION's OWNER takes the action against the TARGET CREATURE.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Core.ActiveRollSpecification.#ctor(Dawnsbury.Core.Mechanics.Core.CalculatedNumber.CalculatedNumberProducer,Dawnsbury.Core.Mechanics.Core.CalculatedNumber.CalculatedNumberProducer)">
            <summary>
            An active roll specification determines what kind of roll the owner of an action must make against each target.
            </summary>
            <param name="DetermineBonus">Returns the calculated attack or non-attack bonus to this d20 roll,
            when the ACTION's OWNER takes the action against the TARGET CREATURE(nullable).</param>
            <param name="DetermineDC">Returns the calculated DC that the active roll must hit or exceed
            when the ACTION's OWNER takes the action against the TARGET CREATURE.</param>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Core.ActiveRollSpecification.DetermineBonus">
            <summary>Returns the calculated attack or non-attack bonus to this d20 roll,
            when the ACTION's OWNER takes the action against the TARGET CREATURE(nullable).</summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Core.ActiveRollSpecification.DetermineDC">
            <summary>Returns the calculated DC that the active roll must hit or exceed
            when the ACTION's OWNER takes the action against the TARGET CREATURE.</summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Core.Bonus">
            <summary>
            Represents a flat numerical modifier to a numerical value. 
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Core.CalculatedActiveRoll">
            <summary>
            A calculated active roll represents an attack roll, a skill check roll, or other roll that the owner of
            an action makes, usually against a specific target, with all bonuses already calculated in.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Core.CalculatedNumber">
            <summary>
            Represents a fully calculated active roll bonus or a fully calculated DC, each with a base number, bonuses and a full explanation. 
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Core.CalculatedNumber.CalculatedNumberProducer">
            <summary>
            Delegate that returns a fully calculated number for a COMBAT ACTION used by ATTACKER against a TARGET.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Core.CheckResult">
            <summary>
            Also called "degree of success" or "success kind".
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Core.Checks.ModifyDamageFromBasicSave(Dawnsbury.Core.Roller.DiceFormula,Dawnsbury.Core.Mechanics.Core.CheckResult)">
            <summary>
            Creates a damage formula based on the result of a basic saving throw. WARNING! You should probably not use this method, and instead use
            <see cref="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Common.CommonSpellEffects.DealBasicDamage(Dawnsbury.Core.CombatActions.CombatAction,Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Mechanics.Core.CheckResult,System.String,Dawnsbury.Core.Mechanics.Enumerations.DamageKind)"/> or <see cref="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Common.CommonSpellEffects.DealBasicPersistentDamage(Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Mechanics.Core.CheckResult,System.String,Dawnsbury.Core.Mechanics.Enumerations.DamageKind)"/>, which deal better with effects that add damage bonuses before the effects of the saving throw adjustments. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Core.Checks.BestRoll(Dawnsbury.Core.Mechanics.Core.CalculatedNumber.CalculatedNumberProducer[])">
            <summary>
            Creates a producer that choose the producer among the ones given that causes the greatest active bonus.
            </summary>
            <param name="bestAmongNumberProducers">A non-empty collection of producers.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Core.Checks.DefenseDC(Dawnsbury.Core.Mechanics.Enumerations.Defense)">
            <summary>
            Returns a delegate that calculates the total AC, Fortitude DC, Reflex DC, Will DC, Perception DC or skill DC.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Core.Counteracting.DetermineMinimumNeededResult(System.Int32,System.Int32)">
            <summary>
            Gets the minimum check result you need in order to counteract the target, or null if you cannot counteract the target.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Damage.DamageEvent">
             <summary>
             Damage can only ultimately be dealt as a damage event (a.k.a. an instance of damage). In Dawnsbury Days, a damage event is the result of a single damage roll (possibly modified by
             effects) against a single creature as part of a single, possibly subordinate, action.
            
             For example, a Strike always results in only a single damage event, even if the damage is modified by additional fire or alignment damage. A spell that deals fire and good damage at
             to the same creature creates a single damage event, but if it does so to multiple creatures, then those creatures each have separate damage events.
             </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.CombatAction">
            <summary>
            The action that created the bulk of the damage. It must have an owner, who is the source of the damage.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.Source">
            <summary>
            The creature that dealt this damage.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.CheckResult">
            <summary>
            Check result of the main check of the <see cref="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.CombatAction"/> that dealt this damage, specifically the check made with regards to this target.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.TargetCreature">
            <summary>
            The creature that's being dealt damage by this damage event.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.KindedDamages">
            <summary>
            Gets the parts that compose the damage event, each likely with a different damage type. The list as well as each element is mutable; and the individual elements may also change as the event is being dealt.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.DoubleDamage">
            <summary>
            If true, then <see cref="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.KindedDamages"/> should be doubled before being dealt.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.HalveDamage">
            <summary>
            If true, then <see cref="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.KindedDamages"/> should be halved before being dealt.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.Bonuses">
            <summary>
            List of bonuses to the damage to apply before critical hit/save modifications.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.DamageEventDescription">
            <summary>
            A full rules block description of the damage process, filled it during damage resolution.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Damage.DamageEvent.#ctor(Dawnsbury.Core.CombatActions.CombatAction,Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Mechanics.Core.CheckResult,Dawnsbury.Core.Mechanics.Damage.KindedDamage[],System.Boolean,System.Boolean)">
            <summary>
            Creates a new single damage event that can be performed by <see cref="M:Dawnsbury.Core.Mechanics.Damage.DamageCombinationRules.PerformDamage(Dawnsbury.Core.Mechanics.Damage.DamageEvent)"/>.
            </summary>
            <param name="combatAction">The combat action that deals the damage.</param>
            <param name="targetCreature">The target creature which takes the damage.</param>
            <param name="checkResult">Used to determine whether this damage comes from a critical hit or critical miss.</param>
            <param name="kindedDamages">The parts that compose the damage event, each likely with a different damage type.</param>
            <param name="doubleDamage">If true, then <see cref="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.KindedDamages"/> should be doubled before being dealt.</param>
            <param name="halveDamage">If true, then <see cref="P:Dawnsbury.Core.Mechanics.Damage.DamageEvent.KindedDamages"/> should be halved before being dealt.</param>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Damage.KindedDamage">
            <summary>
            Represents one subpart of a single damage instance. All damage from a single "kinded damage" has a single "kind" -- damage type.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.KindedDamage.DiceFormula">
            <summary>
            Gets or sets the dice formula for this kinded damage.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.KindedDamage.PostCriticalModifierFormula">
            <summary>
            Gets or sets the additional dice formula that is added only if the damage instance comes from a critical hit (on an attack) or a critical failure (on a save).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.KindedDamage.DamageKind">
            <summary>
            Gets the damage type of the kinded damage.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Damage.KindedDamage.ResolvedDamage">
            <summary>
            This is the final damage value, after rolls, resolved during damage resolution. You should not update it directly.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Damage.KindedDamage.AddPostCriticalDamage(Dawnsbury.Core.Roller.DiceFormula)">
            <summary>
            Adds extra damage to be dealt only if the damage instance comes from a critical hit (on an attack) or a critical failure (on a save).
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.None">
            <summary>
            This special value, which is zero, represents no trait and should be used instead of a nullable Trait?.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Uncommon">
            <summary>
            This spell cannot be placed on a scroll, prepared or selected as a standard spell. It's probably a focus spell or otherwise an unavailable spell.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Club">
            <summary>
            This means the weapon group "club".
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Worn">
            <summary>
            This item is a worn item and has its effect in your inventory, and can't be in your hand.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.AlwaysHits">
            <summary>
            This action is unaffected by concealment, and ignores its active specification roll.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.IsNotHostile">
            <summary>
            This combat action doesn't count as a hostile action for the purposes of effects like Invisibility and Sanctuary, even though it targets an enemy.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.IsHostile">
            <summary>
            This combat action counts as a hostile action for the purposes of effects like Invisibility and Sanctuary, even if it doesn't target an enemy.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.DoesNotBreakStealth">
            <summary>
            This combat action doesn't break stealth even though it isn't a Sneak.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.SpecificMagicWeapon">
            <summary>
            This technical trait, when attached to a weapon, means that the system should not attempt to create a +1 version of it, or a +1 striking version of it.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.UnaffectedByConcealment">
            <summary>
            A <see cref="T:Dawnsbury.Core.CombatActions.CombatAction"/> with this technical trait does not ever ask for a miss chance check due to concealment.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Gloves">
            <summary>
            Body part for the purposes of <see cref="P:Dawnsbury.Core.Mechanics.Treasure.Item.WornAt"/>.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Shoes">
            <summary>
            Body part for the purposes of <see cref="P:Dawnsbury.Core.Mechanics.Treasure.Item.WornAt"/>.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Mask">
            <summary>
            Body part for the purposes of <see cref="P:Dawnsbury.Core.Mechanics.Treasure.Item.WornAt"/>.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.MultipleWorn">
            <summary>
            You can wear multiple of these items and they will all work.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.AttackDoesNotIncreaseMultipleAttackPenalty">
            <summary>
            This combat action does not increase the multiple attack penalty on itself, even if it's an <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Attack"/>.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Legacy">
            <summary>
            Placeholder class-of-origin. Do not use.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.TrueClub">
            <summary>
            This weapon is the literal weapon "club".
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.BattleformAttack">
            <summary>
            This item represents a battleform unarmed attack that should not be enhanced by striking handwraps of mighty blows.
            </summary>
        </member>
        <member name="T:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties">
            <summary>
            Contains additional information about a trait.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.HumanizedName">
            <summary>
            Gets the human-readable name of this trait.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.Relevant">
            <summary>
            If true, then this trait will be shown to the player as normal. If false, then this is a hidden technical trait.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.RulesText">
            <summary>
            Some traits are displayed in stat blocks, especially item traits of weapons and armors, and this text is the text that's displayed.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.IsAncestryTrait">
            <summary>
            True if this trait represents an ancestry. <see cref="T:Dawnsbury.Core.CharacterBuilder.Feats.TrueFeat"/>s that have an ancestry trait automatically gain a prerequisite that the character must be of that ancestry and gain the <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.Ancestry"/> technical trait.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.IsClassTrait">
            <summary>
            True if this trait represents a class. <see cref="T:Dawnsbury.Core.CharacterBuilder.Feats.TrueFeat"/>s that have a class trait automatically gain a prerequisite that the character must have that class and gain the <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.ClassFeat"/> technical trait.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.IsElementTrait">
            <summary>
            True if this trait represent a kineticist element.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.ProficiencyName">
            <summary>
            If this trait represents something you can be proficient in, such as a specific weapon or a weapon group, then this is the human-readable name of that proficiency such as "Elven weapons" or "Heavy crossbow".
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.RelevantForShortBlock">
            <summary>
            If true, then this trait will be shown to the player also when it's a trait attached to a combat action. This is usually for traits like "agile" or "sweep".
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.RelevantOnlyForClass">
            <summary>
            If not <see cref="F:Dawnsbury.Core.Mechanics.Enumerations.Trait.None"/>, then this trait only shows up on combat actions that are owned by a member of this class (e.g. school traits for the wizard, or Concentrate for the barbarian).
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties.#ctor(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Dawnsbury.Core.Mechanics.Enumerations.TraitProperties"/>.
            </summary>
            <param name="humanizedName">The human-readable name of this trait.</param>
            <param name="relevant">If true, then this trait will be shown to the player as normal. If false, then this is a hidden technical trait.</param>
            <param name="rulesText">Some traits are displayed in stat blocks, especially item traits of weapons and armors, and this text is the text that's displayed. Most traits don't need any rules text description.</param>
            <param name="relevantForShortBlock">If true, then this trait will be shown to the player also when it's a trait attached to a combat action. This is usually for traits like "agile" or "sweep".</param>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.Never">
            <summary>
            Doesn't expire on its own.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.Ephemeral">
            <summary>
            Expires at next state-check.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.CountsDownAtEndOfYourTurn">
            <summary>
            The qeffect's value decreases by 1 at end of sufferer's turn, and if it decreases to 0, the qeffect is removed.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.Immediately">
            <summary>
            Expires at next iteration of the state-check loop, or at next state-check if not currently in a state-check.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.ExpiresAtEndOfSourcesTurn">
            <summary>
            Expires at the end of the source's turn.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.CountsDownAtStartOfSourcesTurn">
            <summary>
            The qeffect's value decreased by 1 at the beginning of the source's turn, and if it decreases to 0, the qeffect is removed.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.EphemeralAtEndOfImmediateAction">
            <summary>
            Expires at the end of the current combat action, even if it's part of a greater action.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.ExpiresAtStartOfSourcesTurn">
            <summary>
            Expires at the beginning of the source's turn (possibly after a specified number of rounds).
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.ExpirationCondition.ExpiresAtEndOfYourTurn">
            <summary>
            Expires at the end of the sufferer's turn.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Id">
            <summary>
            Some but far from all QEffects have an Id with special meaning.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Illustration">
            <summary>
            Gets or set the icon of this qeffect.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ExpiresAt">
            <summary>
            Gets or sets the duration of this QEffect.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.CannotExpireThisTurn">
            <summary>
            Determines whether this QEffect cannot expire this turn. If this is true and <see cref="P:Dawnsbury.Core.Mechanics.QEffect.ExpiresAt"/> is <see cref="F:Dawnsbury.Core.Mechanics.ExpirationCondition.ExpiresAtEndOfSourcesTurn"/> or <see cref="F:Dawnsbury.Core.Mechanics.ExpirationCondition.ExpiresAtEndOfYourTurn"/> and this is the source's or owner's turn, then at the end of the turn, this will be set to false instead of the qeffect expiring. This is used to implement the expiration period "until the end of your next turn".
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Name">
            <summary>
            The pure name of this qeffect. QEffects don't need a name if they're technical qeffects not meant to be displayed.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.NameWithValue">
            <summary>
            Display name of this qeffect, including its <see cref="P:Dawnsbury.Core.Mechanics.QEffect.Value"/> if any.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Description">
            <summary>
            Tooltip for this qeffect to be shown when hovering over its icon, or to be shown in the stat block if this qeffect is <see cref="P:Dawnsbury.Core.Mechanics.QEffect.Innate"/>.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AppliedThisStateCheck">
            <summary>
            During each state-check, each QEffect's <see cref="P:Dawnsbury.Core.Mechanics.QEffect.StateCheck"/> and <see cref="P:Dawnsbury.Core.Mechanics.QEffect.StateCheckWithVisibleChanges"/> delegates will happen exactly once, even if the state-check repeats. This property
            keeps track of whether this qeffect applied during this state-check.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Hidden">
            <summary>
            If true, the effect is not displayed as an icon and is not displayed in the card.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Tag">
            <summary>
            Arbitrary data relevant to this specific qeffect that the qeffect can use as it likes.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.UsedThisTurn">
            <summary>
            A QEffect can store information here on whether it was used this turn or not. This property is automatically reset to false when a creature's turn begins.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.SubsumedBy">
            <summary>
            If the owner of this effect also has one of these qeffects, then this qeffect is not displayed as an icon.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Innate">
            <summary>
            This effect is a creature trait or character ability.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Key">
            <summary>
            This effect doesn't stack. If two effects with this same key apply to the same creature, only the one with the greater value prevails. If they have the same value, the newer one prevails.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.QuickenedFor">
            <summary>
            This creature is quickened and if it can use the extra action for the COMBAT ACTION, this returns true.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Value">
            <summary>
            Some conditions have a value. If this QEffect represents such a condition, then this is that value.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Source">
            <summary>
            Gets the creature that is the origin of this effect. Not all QEffects have a source.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.SourceAction">
            <summary>
            Gets the action/spell that creates this effect. Nullable! The vast majority of QEffects do not show the source action in this property.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Owner">
            <summary>
            Gets the creature that is suffering this effect, and has it in its <see cref="P:Dawnsbury.Core.Creatures.Creature.QEffects"/> list.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.RoundsLeft">
            <summary>
            If this qeffect's <see cref="P:Dawnsbury.Core.Mechanics.QEffect.ExpiresAt"/> is measured in rounds, then this is the number of rounds that are left.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.#ctor">
            <summary>
            Initializes a technical QEffect which has no icon, no name and no text and lasts forever, unless you set up an expiration later.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.#ctor(System.String,System.String)">
            <summary>
            Initializes an <see cref="P:Dawnsbury.Core.Mechanics.QEffect.Innate"/> QEffect which is displayed in the creature's stat block under the ABILITIES heading.
            </summary>
            <param name="name">Name to be displayed in bold in the rules block under ABILITIES.</param>
            <param name="description">Description to be displayed in the stat block.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.#ctor(System.String,System.String,Dawnsbury.Core.Mechanics.ExpirationCondition,Dawnsbury.Core.Creatures.Creature,Dawnsbury.Display.Illustrations.Illustration)">
            <summary>
            Initializes a new standard QEffect that's displayed as icon on the creature token.
            </summary>
            <param name="name">Name shown as a tooltip and also shown as an overhead flyout when the creature first receives this QEffect.</param>
            <param name="description">Description shown on the tooltip.</param>
            <param name="expiresAt">Determines how long this QEffect lasts.</param>
            <param name="source">The creature which created this QEffect, usually the caster of the spell. Some qeffects have no source.</param>
            <param name="illustration">Icon of this QEffect.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.#ctor(Dawnsbury.Core.Mechanics.ExpirationCondition)">
            <summary>
            Initializes a technical QEffect which has no icon, no name and no text and lasts until <paramref name="ephemeralCondition"/>, which is usually <see cref="F:Dawnsbury.Core.Mechanics.ExpirationCondition.Ephemeral"/>.
            </summary>
            <param name="ephemeralCondition">How long should this qeffect last? Usually <see cref="F:Dawnsbury.Core.Mechanics.ExpirationCondition.Ephemeral"/>.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.WithExpirationAtStartOfSourcesTurn(Dawnsbury.Core.Creatures.Creature,System.Int32)">
            <summary>
            This qeffect will last for ROUNDS rounds and expires afterwards at the beginning of SOURCE's turn.
            </summary>
            <param name="source">This qeffect should expire at the beginning of this creature's turn.</param>
            <param name="rounds">This qeffect should expires after this many rounds.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.RollPersistentDamageRecoveryCheck(System.Boolean)">
            <summary>
            Rolls a recovery check for this QEffect assuming that this QEffect is <see cref="M:Dawnsbury.Core.Mechanics.QEffect.PersistentDamage(System.String,Dawnsbury.Core.Mechanics.Enumerations.DamageKind)"/>. Removes this QEffect if the recovery check succeeds.
            </summary>
            <param name="assisted">Should the DC of the flat check be reduced to 10 because you're receiving a particularly appropriate type of help?</param>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Dismissable">
            <summary>
            Can be dismissed as an action.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.ImmunityToTargeting(Dawnsbury.Core.CombatActions.ActionId,Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Creates a QEffect that makes a creature immune to <paramref name="actionId"/> used by the actor <paramref name="source"/> for the rest of the encounter.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.ImmunityToTargeting(Dawnsbury.Core.CombatActions.ActionId)">
            <summary>
            Creates a QEffect that makes its owner untargetable by actions with the given ACTION ID for the rest of the encounter. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YouDealDamageWithStrike">
            <summary>
            After you successfully Strike with COMBAT ACTION, about to deal DICE FORMULA damage to the DEFENDER, this happens and you instead deal the returned DICE FORMULA damage.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YouDealDamageWithStrike2">
            <summary>
            After you successfully Strike with COMBAT ACTION, about to deal KINDED DAMAGE as main damage to the DEFENDER, this happens, and in this, you may adjust the mutable kinded damage.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AdditionalGoodness">
            <summary>
            If you take a COMBAT ACTION against a DEFENDER, then that combat action will gain extra additional goodness.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ImmuneToTrait">
            <summary>
            This creature is utterly unaffected by combat actions with this trait.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.IncreaseItemDamageDie">
            <summary>
            Returns true if the damage die of the given ITEM should be increased by one step.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.IncreaseItemDamageDieCount">
            <summary>
            Returns true if the number of damage dice of the given ITEM should be increased by one.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.IncreaseSpellEffectDamageDie">
            <summary>
            Returns true if all damage dice of the given SPELL OR IMPULSE's damage roll which deals DAMAGE-KIND damage should be increased by one step.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YouAreDealtDamage">
            <summary>
            Just before the ATTACKER deals DAMAGE STUFF to DEFENDER, this happens. This creature is the defender. This happens after weakness and resistance applies. You should return any modification you want to make, or null.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YouAreDealtLethalDamage">
            <summary>
            Just before the ATTACKER deals DAMAGE STUFF to DEFENDER, this happens. This creature is the defender. This happens after weakness and resistance applies, and after any other effects apply, and only if the damage would reduce your HP to 0. You should return any modification you want to make, or null.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToAllSpeeds">
            <summary>
            Returns a bonus or penalty that applies to all of your Speeds, in squares.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YouAcquireQEffect">
            <summary>
            Whenever a new QEFFECT is added to you, instead the returned QEffect is added to you. If you return null, no new QEffect is added to you. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.StartOfYourTurn">
            <summary>
            Happens at the beginning of your action phase in your turn.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvideContextualAction">
            <summary>
            Returns a new action that you can perform as a "contextual action". If you return null, no new possibility is added to the "Contextual actions" section. Possibilities are regenerated at each state-check.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvideActionIntoPossibilitySection">
            <summary>
            If the given POSSIBILITY SECTION should contain an additional action, then this returns the new action that you can perform. It will be added into that section. For example, if you want to add a new attack maneuver, you would write:
            <code>
            ProvideActionIntoPossibilitySection = (self, section) => {
              if (section.PossibilitySectionId == PossibilitySectionId.AttackManeuvers) {
                return new ActionPossibility(...);
              } else return null;
            }
            </code>
            If you return null, no new possibility is added to the section. Possibilities are regenerated at each state-check.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvideSectionIntoSubmenu">
            <summary>
            If the given SUBMENU POSSIBILITY should contain an additional section of possibilities, then this returns the new section that contains actions that you can can perform. It will be added into that submenu. For example, if you want to add a new set of actions that can be done as attack maneuvers, you could write:
            <code>
            ProvideSectionIntoSubmenu = (self, submenu) => {
              if (submenu.Name == "Attack maneuvers") {
                return new PossibilitySection(...);
              } else return null;
            }
            </code>
            If you return null, no new possibility section is added to the submenu. Possibilities are regenerated at each state-check.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvideMainAction">
            <summary>
            Returns a new action that you can perform as a "main action". If you return null, no new possibility is added to the "Main actions" section. Possibilities are regenerated at each state-check. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouDealDamage">
            <summary>
            Happens just after you (as ATTACKER) use the COMBAT ACTION to deal at least 1 damage to TARGET . 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouDealDamageOfKind">
            <summary>
            Happens just after you (as ATTACKER) use the COMBAT ACTION to deal at least 1 damage that is DAMAGE KIND to TARGET . 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.StateCheck">
            <summary>
            Happens as a state-based effect, modifies numbers only and has no lasting effect on the battle.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.StateCheckWithVisibleChanges">
            <summary>
            Happens as a state-based effect, and can potentially cause permanent changes to the battlemap.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.EndOfYourTurn">
            <summary>
            Happens at the end of your turn.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToAllChecksAndDCs">
            <summary>
            Returns a bonus or penalty that applies to all of your checks and DCs.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToSkills">
            <summary>
            Returns a bonus or penalty that applies to all of your skill checks and skill DCs with the SKILL.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToSkillChecks">
            <summary>
            Returns a bonus or penalty that applies to your skill checks with the given SKILL used in the COMBAT ACTION against a TARGET.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToSpellSaveDCs">
            <summary>
            Returns a bonus or penalty that applies to DCs of your spells.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToAbilityBasedChecksRollsAndDCs">
            <summary>
            Returns a penalty that applies to all checks, rolls and DCs that are based on ABILITY, including damage.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToAttackRolls">
            <summary>
            Returns a bonus or penalty that applies to the main check of a COMBAT ACTION you take against DEFENDER (nullable).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToDefenses">
            <summary>
            Returns a bonus or penalty that applies to your DEFENSE against the COMBAT ACTION(nullable).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AdjustSavingThrowResult">
            <summary>
            Transforms an original CHECK RESULT that you received from a saving throw against COMBAT ACTION into a new check result.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.IsFlatFootedTo">
            <summary>
            Returns the reason why you are flat-footed to the CREATURE(nullable) that's attacking you with COMBAT ACTION(nullable); or null if you're not.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.PreventTargetingBy">
            <summary>
            Returns a reason for why you are immune to being targeted by the COMBAT ACTION. If you're not immune, returns null.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.PreventTakingAction">
            <summary>
            Returns the reason for why you can't take the COMBAT ACTION, or null if you can.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.FizzleIncomingActions">
            <summary>
            Causes a COMBAT ACTION performed against you to expend resources but have no effect against you if this returns true. It may still affect other targets. The check, if any, is written to the STRING BUILDER.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.FizzleOutgoingActions">
            <summary>
            Causes a COMBAT ACTION that you perform to expend resources but have no effect at all if this returns true. The check, if any, is written to the STRING BUILDER.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouMakeAttackRoll">
            <summary>
            This happens after you make an attack roll.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.EndOfAnyTurn">
            <summary>
            This happens at the end of each creature's turn.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouTakeHostileAction">
            <summary>
            This happens after you take a hostile COMBAT ACTION.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouTakeAction">
            <summary>
            This happens after you take a COMBAT ACTION.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouAreTargeted">
            <summary>
            This happens after the COMBAT ACTION that includes you as a target resolves.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouTakeDamage">
            <summary>
            This happens after you take AMOUNT of damage (which consists primarily of DAMAGE KIND, but could contain other damage kinds as well) from a COMBAT ACTION and you know WHETHER IT CAME FROM A CRITICAL HIT. If you need to know specifically ALL the damage kinds dealt to you, use <see cref="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouTakeDamageOfKind"/> instead.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouTakeDamageOfKind">
            <summary>
            This happens after a COMBAT ACTION(nullable) deals at least 1 damage that is DAMAGE KIND to you.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.SightReductionTo">
            <summary>
            All creatures and objects are at most this visible to you, and never more visible.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.WhenProvoked">
            <summary>
            Triggers when an adjacent enemy provokes an attack of opportunity by using a COMBAT ACTION.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ImmuneToCondition">
            <summary>
            The owner of this QEffect can't get and is immune to all QEffects with this ID.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.DoNotShowUpOverhead">
            <summary>
            If true, then this qeffect's name won't show up as an overhead when a creature receives it. Usually, you would use this when the effect's name
            is the same as the name of the personal spell that was just cast.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.WhenExpires">
            <summary>
            Triggers after this qeffect is removed from its owner for any reason.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.WhenMonsterDies">
            <summary>
            Triggers after the owner dies.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BeforeYourSavingThrow">
            <summary>
            Triggers just before a COMBAT ACTION would cause YOU to roll a saving throw.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BeforeYourActiveRoll">
            <summary>
            Triggers just before your COMBAT ACTION would cause you to roll a attack roll or other roll against a TARGET.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvideStrikeModifier">
            <summary>
            Returns the combat action that's like a Strike that you can perform for the given ITEM.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvideStrikeModifierAsPossibility">
            <summary>
            Returns a possibility that's to be added into the submenu of an ITEM.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToDamage">
            <summary>
            Returns a bonus or penalty to damage that's being dealt by a COMBAT ACTION you're taking against the DEFENDER.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AddExtraWeaponDamage">
            <summary>
            Returns extra damage that would be dealt by a WEAPON's Strikes.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AddExtraStrikeDamage">
            <summary>
            Returns extra damage that would be dealt by your COMBAT ACTION that's a Strike against a TARGET (or null, if no extra damage).
            You can also use <see cref="P:Dawnsbury.Core.Mechanics.QEffect.AddExtraKindedDamageOnStrike"/> which is more powerful. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AddExtraKindedDamageOnStrike">
            <summary>
            Returns extra kinded damage that would be dealt by your COMBAT ACTION that's a Strike against a TARGET (or null, if no extra damage). 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YouAreTargeted">
            <summary>
            Happens when you're a target of COMBAT ACTION, just before that action would cause a roll against you.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvideFortuneEffect">
            <summary>
            Depending on whether a d20 roll IS A SAVING THROW, returns the reason why it benefits from a fortune effect, or null if it doesn't.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.MetamagicProvider">
            <summary>
            This QEffect is a capability to perform metamagic.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.DetermineMainCheckResult">
            <summary>
            This is a tutorial function. If not null, it overrides the results of all main checks performed by this creature.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.WhenCreatureDiesAtStateCheckAsync">
            <summary>
            Triggers during the state-check when this creature is destroyed.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BonusToSelfHealing">
            <summary>
            If the owner is affected by a HEALING ACTION(nullable!), that healing action gets the given BONUS to the healing.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.HalveHealingFromEffects">
            <summary>
            If the owner is affected by a HEALING ACTION(nullable!), the healing action's healing MAY BE divided by two.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AdditionalUnarmedStrike">
            <summary>
            Grants the given item as an extra unarmed attack.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.StartOfCombat">
            <summary>
            Triggers at start of combat, just after the opening cutscene ends, before the first turn of the first creature.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.EndOfCombat">
            <summary>
            Triggers at end of combat, just after the closing cutscene ends for an encounter. The boolean is "true" if the player won the encounter. The game loop ends immediately after this.
            This triggers even if this creature is dead by this point or otherwise no longer exists.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.ProvidesArmor">
            <summary>
            While you have this effect, you count as wearing this armor instead of whatever base armor you have. 
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.TriggeredByIncomingMeleeStrikeHitAndYouAreNotRaisingAShield">
            <summary>
            Triggers when a COMBAT ACTION action that's a melee strike with the CHECK BREAKDOWN RESULT would cause you to become hit and you are not currently raising a shield, and returns true if
            the roll evaluation should be repeated, with the same natural d20 number.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.DoNotUseResistancesAndImmunitiesAgainst">
            <summary>
            When a COMBAT ACTION deals damage to you, this returns true if your resistances and immunities should be ignored for that damage.  
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.StartOfSourcesTurn">
            <summary>
            Triggers at the beginning of the turn of the creature who created this QEffect, just before it would expire (if it expires at the beginning of the source's turn).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YourStrikeGainsDamageType">
            <summary>
            When you make a STRIKE, it deals its normal damage type or the damage type returned by this method, if it's worse for the target.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.AfterYouAcquireEffect">
            <summary>
            Triggers after you acquire a new QEFFECT. (The first QEffect is this one; the second one is the one you've just acquired.)
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.IncreaseCover">
            <summary>
            When a COMBAT ACTION targets you and you have COVER KIND from it, instead that cover increases to the cover kind you return from this.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.RepresentsPoison">
            <summary>
            True if this QEffect is a poison affliction that does something every round.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.YouBeginAction">
            <summary>
            Triggers as you begin to take the COMBAT ACTION, just after any attacks-of-opportunity resolve
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.Affliction">
            <summary>
            This QEffect is associated with this poison.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.SetBaseSpeedTo">
            <summary>
            If this is not -1, then this creature's base speed becomes this number.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BattleformMinimumStrikeModifier">
            <summary>
            If this is not 0, then this creature's minimum attack modifier is this number, unless its own modifier is greater.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.QEffect.BattleformMinimumAthleticsModifier">
            <summary>
            If this is not 0, then this creature's minimum Athletics modifier is this number, unless its own modifier is greater.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.QEffect.AddGrantingOfTechnical(System.Func{Dawnsbury.Core.Creatures.Creature,System.Boolean},System.Action{Dawnsbury.Core.Mechanics.QEffect})">
            <summary>
            Adds a state-check action to this QEffect which grants an ephemeral technical QEffect to some or all creatures on the battlefield.
            </summary>
            <param name="shouldApplyToCreature">Filter for which creatures should be given the technical QEffect.</param>
            <param name="adjustTechnicalEffect">Set up the properties for the technical QEffect.</param>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.QEffectId.IgnoresDifficultTerrain">
            <summary>
            This effect causes the owner to ignore difficult terrain.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.QEffectId.ScoundrelRacket">
            <summary>
            When you successfully Feint, the target is flat-footed against melee attacks you attempt against it until the end of your next turn.
            On a critical success, the target is flat-footed against all melee attacks until the end of your next turn, not just yours.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.QEffectId.Flying">
            <summary>
            This effect causes the owner to ignore difficult terrain, among other things, such as ignoring Grease.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.QEffectId.RangersCompanion">
            <summary>
            This effect represents that this creature is an animal companion. It may be a ranger's companion or a druid's companion, or even granted by a modded class or archetype.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.QEffectId.DirgeOfDoomFrightenedSustainer">
            <summary>
            For as long as you have this QEffect, your frightened condition cannot be reduced below 1.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Rules.HiddenRules.IsHiddenFromAllEnemies(Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Tiles.Tile)">
            <summary>
            Returns true if CREATURE is currently Hidden from all enemies and would continue to have cover or concealment from all enemies in the MOVE TO square; and at least one
            enemy exists or the creature is invisible.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Mechanics.Targeting.ChosenTargets.CheckResults">
            <summary>
            Gets the result of the main check roll for each target of this action. If no main check roll happened for a creature (e.g. because the creature is exempted from the spell), then there is no record
            for that creature in this dictionary. You should only use this after all rolls have been performed, e.g. in <see cref="M:Dawnsbury.Core.CombatActions.CombatAction.WithEffectOnChosenTargets(System.Func{Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Mechanics.Targeting.ChosenTargets,System.Threading.Tasks.Task})"/>.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Targeting.Targets.SelfTarget.WithAdditionalRestriction(System.Func{Dawnsbury.Core.Creatures.Creature,System.String})">
            <summary>
            Adds an additional restriction to when you can use this action.
            </summary>
            <param name="additionalRestriction">When CASTER uses this action, this returns a reason for why that action can't be performed, or null if it's okay to perform.</param>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Treasure.Item.CannotDrinkBecause">
            <summary>
            If a drink or administer action wants to administer a potion to a TARGET CREATURE, then this returns null if it's possible or a reason why it isn't, in the form of a sentence fragment that goes in "You can't drink this because you are FRAGMENT-HERE."
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Treasure.Item.ProvidesItemAction">
            <summary>
            If a CREATURE is holding this ITEM in their hands, then that creature can use the returned possibility as an item action.
            If this is null or if it returns null, then no extra item action will be added as a possibility to the creature.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Mechanics.Treasure.Item.IsWorn">
            <summary>
            This is set to "true" as a combat begins if this item is designated as a worn item in the backpack. This is always false while looking at the inventory outside of an encounter. In those cases,
            use <see cref="M:Dawnsbury.Core.CharacterBuilder.Inventory.IsBestWornItemInItsBodyPart(Dawnsbury.Core.Mechanics.Treasure.Item)"/> instead. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Treasure.Item.#ctor(Dawnsbury.Core.Mechanics.Treasure.ItemName,Dawnsbury.Display.Illustrations.Illustration,System.String,System.Int32,System.Int32,Dawnsbury.Core.Mechanics.Enumerations.Trait[])">
            <summary>
            Creates a new item that creatures can wield or carry. You can use .With...() methods and the item's properties to further customize it later. 
            </summary>
            <param name="itemName">Technical identifier of the item.</param>
            <param name="illustration">Illustration of the item in a creature's hands or inventory.</param>
            <param name="name">Name of the item. It should be all lowercase.</param>
            <param name="level">Level at which the item will be available in the shop in the main adventure path.</param>
            <param name="price">How much gold does it cost to purchase this item from the shop.</param>
            <param name="traits">Traits of the item.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Treasure.Item.#ctor(Dawnsbury.Display.Illustrations.Illustration,System.String,Dawnsbury.Core.Mechanics.Enumerations.Trait[])">
            <summary>
            Creates a new item that creatures can wield or carry. This overload is meant for natural attacks or pseudoitems that aren't intended to be in the shop.
            </summary>
            <param name="illustration">Illustration of the item in a creature's hands or inventory.</param>
            <param name="name">Name of the item. It should be all lowercase.</param>
            <param name="traits">Traits of the item.</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Treasure.Item.WithWeaponProperties(Dawnsbury.Core.Mechanics.Treasure.WeaponProperties)">
            <summary>
            Converts this item into a weapon and adds weapon properties to it.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Treasure.WeaponProperties.#ctor(System.String,Dawnsbury.Core.Mechanics.Enumerations.DamageKind)">
            <summary>
            Initializes the weapon properties of an item.
            </summary>
            <param name="damageDieSize">How much damage does the weapon do? (must not have flat bonuses, so use only "1d6" or "2d8", for example)</param>
            <param name="damageKind">Primary damage type of this weapon</param>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Treasure.WeaponProperties.WithAdditionalDamage(System.String,Dawnsbury.Core.Mechanics.Enumerations.DamageKind)">
            <summary>
            Besides normal damage, this weapon deals additional (usually energy or poison) damage.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Mechanics.Treasure.WeaponProperties.WithAdditionalPersistentDamage(System.String,Dawnsbury.Core.Mechanics.Enumerations.DamageKind)">
            <summary>
            Besides normal damage, this weapon deals additional persistent damage on a hit.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Possibilities.Possibilities.Grapple(Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Creatures.Creature,Dawnsbury.Core.Mechanics.Core.CheckResult)">
            <summary>
            Performs the results of a grab or grapple action of GRAPPLER onto TARGET with CHECK RESULT. On a failure, this may cause an existing grapple to end. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Possibilities.Possibility.WithPossibilityGroup(System.String)">
            <summary>
            Assigns this possibility to a "possibility group". If <see cref="P:Dawnsbury.IO.PlayerProfile.CombineRelatedActions"/> is enabled, then if there are two full-height actions of the same <see cref="P:Dawnsbury.Core.Possibilities.Possibility.PossibilityGroup"/> in the bottom action bar next to each other, they will be merged into the same column as half-height actions. If there are three such actions next to each other, they will be combined into a single submenu named as the possibility group. Use the constants available in <see cref="T:Dawnsbury.Constants"/> in preference to pure decompiled strings.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Possibilities.PossibilitySection.PossibilitySectionId">
            <summary>
            Some possibility sections have a technical ID so that you can refer to them without using the human-readable name in mods and effects.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Possibilities.SpellVariant.GoodnessModifier">
            <summary>
            If not null, then if an AI considers casting this variant with usefulness USEFULNESS, then this variant is instead considered to have the returned usefulness from this method.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Possibilities.SubmenuPossibility.SubmenuId">
            <summary>
            Some submenu possibilities have a special ID so that you can refer to them by technical ID instead of by name in mods or effects.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.TBattle.CampaignState">
            <summary>
            Returns the current campaign run, if any.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.TBattle.CreatureControllingInitiative">
            <summary>
            The active creature; or, if the currently active creature is a minion, then this is the minion's master.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.TBattle.AllSpawnedCreatures">
            <summary>
            Gets all creatures that have been spawned in this battle, even if they are already dead or otherwise removed from the battlefield.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.TBattle.Trigger(Dawnsbury.Campaign.Encounters.TriggerName)">
            <summary>
            Causes all events attached to the given TRIGGER NAME to happen. Events are usually attached to triggers by encounter definitions.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.TBattle.RemoveCreatureFromGame(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Removes a creature from the battlemap using an opacity-decreasing animation, replacing it with an invisible corpse creature.
            </summary>
        </member>
        <member name="F:Dawnsbury.Core.Tiles.Coverlines.CornersToCorners">
            <summary>
            Contains true if the path from ORIGIN-X and ORIGIN-Y to TARGET-X and TARGET-Y is blocked by a strong obstacle.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.CreatureSpawnOptions.SpawnOnDifficulty">
            <summary>
            A creature will only spawn on this tile if the difficulty is at least this.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.CreatureSpawnOptions.EliteOnDifficulty">
            <summary>
            The creature that spawns on this tile will be elite if the difficulty is at least this.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.CreatureSpawnOptions.SupremeOnDifficulty">
            <summary>
            The creature that spawns on this tile will be supreme if the difficulty is at least this.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.CreatureSpawnOptions.WeakOnDifficulty">
            <summary>
            The creature that spawns on this tile will be weak if the difficulty is at most this.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.CreatureSpawnOptions.InferiorOnDifficulty">
            <summary>
            The creature that spawns on this tile will be inferior if the difficulty is at most this.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.CreatureSpawnOptions.SpawnAsPlayerControlled">
            <summary>
            The creature spawns under the control of the human player.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.CreatureSpawnOptions.SpawnsDuringCutsceneOnly">
            <summary>
            The creature will spawn only on the direction of the cutscene, not as the map is loaded.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.Tile.IsFree">
            <summary>
            Indicates if the tile is empty and doesn't block movement of anyone or anything, and there isn't even any unconscious creature.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Tiles.Tile.IsGenuinelyFreeTo(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Indicates if the tile is enterable by the given creature, taking into account even undetected creatures.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Tiles.Tile.IsTrulyGenuinelyFreeTo(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Indicates if the given creature can stay on this file, taking into account even undetected creatures, and even unconscious creatures.
            </summary>
        </member>
        <member name="M:Dawnsbury.Core.Tiles.Tile.LooksFreeTo(Dawnsbury.Core.Creatures.Creature)">
            <summary>
            Indicates if the tile appears to be empty and walkable to the CREATURE (but it might not be empty because it has an undetected creature in it).
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.AfterCreatureEntersHere">
            <summary>
            Triggers after a CREATURE enters this square, but doesn't trigger if the creature is already here or remains here.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.AfterCreatureBeginsItsTurnHere">
            <summary>
            Triggers as a CREATURE begins its turn in this square.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.AfterDamageIsDealtHere">
            <summary>
            Triggers after any damage is dealt into this square.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.SeekDC">
            <summary>
            If not zero, then this is the DC that a Seek action must beat to activate this TileQEffect's <see cref="P:Dawnsbury.Core.Tiles.TileQEffect.WhenSeeked"/> action.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.WhenSeeked">
            <summary>
            Triggers when a Seek action succeeds against this effect's <see cref="P:Dawnsbury.Core.Tiles.TileQEffect.SeekDC"/>.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.BalanceDC">
            <summary>
            If not zero, causes the tile to be considered uneven terrain with the given Balance DC.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.BalanceAllowsReflexSave">
            <summary>
            If <see cref="P:Dawnsbury.Core.Tiles.TileQEffect.BalanceDC"/> is not zero and this is true, then the uneven terrain on this tile allows for a Reflex save in addition to using Acrobatics.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.TransformsTileIntoDifficultTerrain">
            <summary>
            Causes the tile to be considered difficult terrain.
            </summary>
        </member>
        <member name="P:Dawnsbury.Core.Tiles.TileQEffect.ExpiresAt">
            <summary>
            Determines when TileQEffect expires. Not all expiration conditions make sense for a tile.
            </summary>
        </member>
        <member name="T:Dawnsbury.DawnsburyProgram">
            <summary>
            The main class.
            </summary>
        </member>
        <member name="M:Dawnsbury.DawnsburyProgram.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Dawnsbury.Display.Controls.Listbox.ShopListboxItem">
            <summary>
            Represents a listbox item that represents an item in a shop or in the list of all items.
            </summary>
        </member>
        <member name="P:Dawnsbury.Display.Controls.ScrollPane.Reverse">
            <summary>
            If true, the scroll pane begins at the bottom.
            </summary>
        </member>
        <member name="P:Dawnsbury.Display.Controls.ScrollPane.ScrollBarHold">
            <summary>
            If not null, then the scrollbar is currently being held; and the adjustment represents the adjustment from the beginning of the scrollbar to the point where it was grabbed.
            </summary>
        </member>
        <member name="P:Dawnsbury.Display.Controls.ScrollPane.ScrollBarHoldClass.ExtraYAdjustment">
            <summary>
            The amount of pixels that the scroll pane would scroll down (or scroll up, in case of reverse), from the beginning of the scrollbar to the point where it is grabbed.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Controls.ScrollPane.YAdjustmentNative">
            <summary>
            The scroll pane has scrolled down by this many pixels, i.e. this many pixels are now hidden above the view.
            <br />
            If this is a reverse scroll pane, then the scroll pane has scrolled up by this many pixels, i.e. this many pixels are now hidden below the view. 
            </summary>
        </member>
        <member name="M:Dawnsbury.Display.Controls.ScrollPane.BeginScrollPane(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Begins the scissor rectangle for this scroll pane.
            </summary>
            <param name="rectangle">All content will be cut to this rectangle.</param>
        </member>
        <member name="M:Dawnsbury.Display.Controls.ScrollPane.EndScrollPane(System.Int32)">
            <summary>
            Draws the scrollbar and ends the scissor rectangle.
            </summary>
            <param name="nativeContentHeight">Total height of the content, in pixels, in native resolution scale.</param>
        </member>
        <member name="M:Dawnsbury.Display.DragAndDrop.ItemSlotReceptacle.RemoveItemFromSource(Dawnsbury.Display.DragAndDrop.DraggedItem)">
            <summary>
            Removes the <paramref name="draggedItem"/> from wherever it is, if it's somewhere, and returns the type of location where it was.
            </summary>
        </member>
        <member name="T:Dawnsbury.Display.Illustrations.Illustration">
            <summary>
            Represents a 2D picture. The most common kind of illustration is the <see cref="T:Dawnsbury.Display.Illustrations.SimpleIllustration"/>.
            </summary>
        </member>
        <member name="T:Dawnsbury.Display.Illustrations.ModdedIllustration">
            <summary>
            Represents a user-supplied or mod-supplied .png file in the CustomMods folder.
            </summary>
            <param name="Filename">Filename of a .png file that's in the CustomMods folder, including extension and subfolder path, for example "AcidicBurst.png" for a file that's in the CustomMods folder itself, or "myModImages/AcidicBurst.png" for a file that's in the "myModImages" subfolder. These filenames are shared AMONG ALL MODS, so consider using a filename that's unlikely to collide with the filename of any other user. Putting all of your art in a subfolder named after your mod, for example, is a good idea.</param>
        </member>
        <member name="M:Dawnsbury.Display.Illustrations.ModdedIllustration.#ctor(System.String)">
            <summary>
            Represents a user-supplied or mod-supplied .png file in the CustomMods folder.
            </summary>
            <param name="Filename">Filename of a .png file that's in the CustomMods folder, including extension and subfolder path, for example "AcidicBurst.png" for a file that's in the CustomMods folder itself, or "myModImages/AcidicBurst.png" for a file that's in the "myModImages" subfolder. These filenames are shared AMONG ALL MODS, so consider using a filename that's unlikely to collide with the filename of any other user. Putting all of your art in a subfolder named after your mod, for example, is a good idea.</param>
        </member>
        <member name="P:Dawnsbury.Display.Illustrations.ModdedIllustration.Filename">
            <summary>Filename of a .png file that's in the CustomMods folder, including extension and subfolder path, for example "AcidicBurst.png" for a file that's in the CustomMods folder itself, or "myModImages/AcidicBurst.png" for a file that's in the "myModImages" subfolder. These filenames are shared AMONG ALL MODS, so consider using a filename that's unlikely to collide with the filename of any other user. Putting all of your art in a subfolder named after your mod, for example, is a good idea.</summary>
        </member>
        <member name="T:Dawnsbury.Display.Illustrations.SimpleIllustration">
            <summary>
            Represents an illustration that is drawn by drawing an .xnb file corresponding to the <see cref="P:Dawnsbury.Display.Illustrations.SimpleIllustration.IllustrationName"/>. There exists an implicit conversion from <see cref="T:Dawnsbury.Core.IllustrationName"/> to this type.
            </summary>
        </member>
        <member name="M:Dawnsbury.Display.Illustrations.SimpleIllustration.#ctor(Dawnsbury.Core.IllustrationName)">
            <summary>
            Represents an illustration that is drawn by drawing an .xnb file corresponding to the <see cref="P:Dawnsbury.Display.Illustrations.SimpleIllustration.IllustrationName"/>. There exists an implicit conversion from <see cref="T:Dawnsbury.Core.IllustrationName"/> to this type.
            </summary>
        </member>
        <member name="M:Dawnsbury.Display.Text.Writer.DrawString(System.String,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Color},Dawnsbury.Display.Text.BitmapFontGroup,Dawnsbury.Display.Text.Writer.TextAlignment,System.Boolean)">
            <summary>
            Draws a multiline text using this class's spritebatch.
            </summary>
            <param name="text">Text to be drawn.</param>
            <param name="rectangle">The rectangle bounding the text.</param>
            <param name="color">Text color.</param>
            <param name="font">Text font (Verdana 14, if null).</param>
            <param name="degrading"></param>
            <param name="alignment">Text alignment.</param>
            <returns>Bounds of the drawn rectangle, in true scale.</returns>
        </member>
        <member name="M:Dawnsbury.Display.Text.Writer.GetMultiLineTextBoundsNative(System.String,Microsoft.Xna.Framework.Rectangle,Dawnsbury.Display.Text.BitmapFontGroup)">
            <summary>
            If the text were written to the specified rectangle, how much width and height would it actually use?
            This method ignores the rectangle's X and Y properties.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="rectangle">Rectangle bounding the text.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="T:Dawnsbury.Display.Text.Writer.TextAlignment">
            <summary>
            Specifies text alignment.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.Top">
            <summary>
            Align to top.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.Left">
            <summary>
            Align to left.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.Middle">
            <summary>
            Align to middle.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.Right">
            <summary>
            Align to right.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.Bottom">
            <summary>
            Align to bottom.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.TopLeft">
            <summary>
            Align to top left.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.TopRight">
            <summary>
            Align to top right.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.BottomLeft">
            <summary>
            Align to bottom left.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.TextAlignment.BottomRight">
            <summary>
            Align to bottom right.
            </summary>
        </member>
        <member name="T:Dawnsbury.Display.Text.Writer.Data">
            <summary>
            This class is used only internally when calculating how to print out a multiline string.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.CurrentFont">
            <summary>
            Font that will be used to print text now,maybe bold or italic.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.CurrentX">
            <summary>
            Total width of the fragments that were already committed to the line that's being constructed.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.CurrentY">
            <summary>
            Vertical coordinates of the line that's being constructed, starting at 0, incrementing by LineHeight.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.TotalNumberOfLines">
            <summary>
            Number of lines that are already finalized.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.Width">
            <summary>
            Maximum permissible width of this multiline string,
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.Height">
            <summary>
            Maximum permissible height of this multiline text.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.LineHeight">
            <summary>
            Constant. Height of a single line.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.fontGroup">
            <summary>
            Fonts used in this multiline string.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.End">
            <summary>
            If true, then we have already overreached our vertical bounds and must stop constructing additional text.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.Lines">
            <summary>
            List of already constructed lines
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.ThisLine">
            <summary>
            Committed fragments of the line that's being constructed
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.Color">
            <summary>
            What color are we currently using to write.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.MaximumWidthEncountered">
            <summary>
            The width of the widest line committed so far
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.IsBold">
            <summary>
            Whether we are now writing bold text.
            </summary>
        </member>
        <member name="F:Dawnsbury.Display.Text.Writer.Data.IsItalics">
            <summary>
            Whether we are now writing italics text.
            </summary>
        </member>
        <member name="M:Dawnsbury.Display.Text.Writer.SetupNewMultilineString(Dawnsbury.Display.Text.BitmapFontGroup,System.String,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Dawnsbury.Display.Text.Writer.TextAlignment,Microsoft.Xna.Framework.Rectangle@,System.Collections.Generic.List{Dawnsbury.Display.Text.Writer.MultilineFragment}@,System.Boolean)">
            <summary>
            Draws a multi-string. 
            WARNING! This grows more CPU-intensive as the number of words grow (only if word wrap enabled). It is recommended to use the DrawMultiLineText method instead - it uses caching.
            </summary>
            <param name="fnt">A reference to a SpriteFont object.</param>
            <param name="text">The text to be drawn. <remarks>If the text contains \n it
            will be treated as a new line marker and the text will drawn accordingly.</remarks></param>
            <param name="r">The screen rectangle that the text should be drawn inside of.</param>
            <param name="col">The color of the text that will be drawn.</param>
            <param name="align">Specified the alignment within the specified screen rectangle.</param>
            <param name="textBounds">Returns a rectangle representing the size of the bounds of
            the text that was drawn.</param>
            <param name="cachedLines">This parameter is internal. Do not use it, merely throw away the variable.</param>
            <param name="degrading">If there is insufficient space to use this font, use a progressively smaller font instead until everything fits.</param>
        </member>
        <member name="M:Dawnsbury.Display.Text.Writer.FlushAndWrite(Dawnsbury.Display.Text.Writer.Data,System.Boolean)">
            <summary>
            Draws whatever is present in the readyFragment on the line. 
             If the current buildfragment can also fit, it is drawn as well.
             If the current buildfragment cannot fit, we go to the next line and it is drawn as well. 
             At the end of this procedure, both readyfragment and buildfragment are empty and something is definitely in thisline (though it can be "").
            </summary>
        </member>
        <member name="F:Dawnsbury.IO.ApproveWorkshopModsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dawnsbury.IO.ApproveWorkshopModsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dawnsbury.IO.ApproveWorkshopModsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Dawnsbury.IO.GameCrashedForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dawnsbury.IO.GameCrashedForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dawnsbury.IO.GameCrashedForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Dawnsbury.IO.LoadingFailedForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dawnsbury.IO.LoadingFailedForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dawnsbury.IO.LoadingFailedForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dawnsbury.Modding.DawnsburyDaysModMainMethodAttribute">
            <summary>
            Each mod must have exactly one public static method annotated with this attribute. The method may be in any class.
            When Dawnsbury Days starts up, it will invoke this method of each loaded mod. The method must have return type <c>void</c>
            and no parameters. 
            </summary>
        </member>
        <member name="T:Dawnsbury.Modding.LoadOrder">
            <summary>
            Helper class that ensures that feats are applied to creatures only after all feats are loaded, to avoid errors during the initial static initialization of classes.
            </summary>
        </member>
        <member name="P:Dawnsbury.Modding.LoadOrder.FeatsLoaded">
            <summary>
            Returns true if all feats have been loaded from both the base game and mods. This happens at the start of the game.
            </summary>
        </member>
        <member name="P:Dawnsbury.Modding.LoadOrder.WhenFeatsBecomeLoaded">
            <summary>
            Gets the list of actions that should happen after all feats become loaded, intended to be mostly adding feats to creature definitions.
            </summary>
        </member>
        <member name="M:Dawnsbury.Modding.LoadOrder.LoadingFeatsCompleted">
            <summary>
            Triggers <see cref="P:Dawnsbury.Modding.LoadOrder.WhenFeatsBecomeLoaded"/>.
            </summary>
        </member>
        <member name="T:Dawnsbury.Modding.LoadOrderDelegated">
            <summary>
            Separate class to avoid static initialization circular load problems.
            </summary>
        </member>
        <member name="T:Dawnsbury.Modding.ModManager">
            <summary>
            Contains static methods that perform common tasks that mods might want to do.
            </summary>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.LoadAllMods">
            <summary>
            Loads all mods from the CustomMods folder into memory and activates their <see cref="T:Dawnsbury.Modding.DawnsburyDaysModMainMethodAttribute"/>-annotated method.
            </summary>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.AddFeat(Dawnsbury.Core.CharacterBuilder.Feats.Feat)">
            <summary>
            Registers a new feat and all its subfeats so that they show up in the character builder.
            </summary>
            <param name="newFeat">A new custom feat to register.</param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterTrait(System.String,Dawnsbury.Core.Mechanics.Enumerations.TraitProperties)">
            <summary>
            Registers a new <see cref="T:Dawnsbury.Core.Mechanics.Enumerations.Trait" /> with the given name and optionally additional properties and returns it. A mod that adds a new trait (such as a mod that creates a new ancestry and
            adds a trait representing that ancestry) should call this method only once and use the returned trait everywhere where needed. A second and third call to this call with the same trait
            name will return the same <see cref="T:Dawnsbury.Core.Mechanics.Enumerations.Trait"/> instance, but only the first call will register the <paramref name="traitProperties"/>, if any.
            </summary>
            <param name="displayName">Human-readable name of the new trait.</param>
            <param name="traitProperties">Some traits can have additional properties and you can optionally supply them here.</param>
            <returns>The singleton instance of the newly created trait.</returns>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterFeatName(System.String,System.String)">
            <summary>
            Creates a new unique <see cref="T:Dawnsbury.Core.CharacterBuilder.Feats.FeatName"/> that uniquely identifies a modded feat. Use the return value of this method as the first argument of a <see cref="T:Dawnsbury.Core.CharacterBuilder.Feats.Feat"/>'s
            constructor, and then you can also use it to refer to that feat in code. 
            </summary>
            <param name="technicalName">The feat will be serialized and deserialized in save files and character libraries under this name. If you're changing an existing feat created with <see cref="F:Dawnsbury.Core.CharacterBuilder.Feats.FeatName.CustomFeat"/> and <see cref="M:Dawnsbury.Core.CharacterBuilder.Feats.Feat.WithCustomName(System.String)"/> into a feat created with <see cref="M:Dawnsbury.Modding.ModManager.RegisterFeatName(System.String,System.String)"/>, then this name must be the exact same string you previously placed into <see cref="M:Dawnsbury.Core.CharacterBuilder.Feats.Feat.WithCustomName(System.String)"/>, otherwise existing save files and character profiles will break.</param>
            <param name="displayName">Optionally, you can set up an alternate display name of the feat here, which will not affect serialization into save files. If you put null or omit this parameter, the feat will be displayed under its technical name.</param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.ReplaceExistingSpell(Dawnsbury.Core.CharacterBuilder.Spellcasting.SpellId,System.Int32,System.Func{Dawnsbury.Core.Creatures.Creature,System.Int32,System.Boolean,Dawnsbury.Core.CharacterBuilder.FeatsDb.Spellbook.SpellInformation,Dawnsbury.Core.CombatActions.CombatAction})">
            <summary>
            Replaces a built-in spell with your own spell definition. 
            </summary>
            <param name="spellToReplace">Spell to be replaced. The original description and code of the spell will not be used.</param>
            <param name="minimumSpellLevel">The new minimum spell level of this spell. Use the minimum spell level "0" if this spell is a cantrip.</param>
            <param name="createSpellInstance">A factory method that creates a new instance of the spell. Make sure to create a new instance instead of always returning the same one. The arguments to the factory method are the CASTER, the SPELL LEVEL this spell has been heightened to, WHETHER THE INSTANCE IS USED IN COMBAT, as opposed to whether it's only to be shown in the character builder (you can use this property to hide parts of the description that are irrelevant during combat, such as heightening text), and SPELL INFORMATION ABOUT THE SOURCE OF THE SPELL. Use the method <see cref="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Spellbook.Spells.CreateModern(Dawnsbury.Display.Illustrations.Illustration,System.String,Dawnsbury.Core.Mechanics.Enumerations.Trait[],System.String,Dawnsbury.Core.StatBlocks.Description.DescriptionDescriptor,Dawnsbury.Core.Mechanics.Targeting.Target,System.Int32,Dawnsbury.Core.Mechanics.Core.SpellSavingThrow)"/> to create the base of the spell.</param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterActionOnEachSpell(System.Action{Dawnsbury.Core.CombatActions.CombatAction})">
            <summary>
            Register an action that will be called for each spell as it's created. You can use this API endpoint to make minor changes to existing spells, such as changing what they target,
            their goodness for the purposes of enemy tactics, their name and description etc.
            </summary>
            <param name="actionOnEachSpell">An action that will be performed on all spells as they're created.</param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterActionOnEachKineticistImpulse(System.Action{Dawnsbury.Core.CombatActions.CombatAction})">
            <summary>
            Register an action that will be called for each kineticist impulse as it's created. You can use this API endpoint to make minor changes to existing impulses, such as changing what they target,
            their goodness for the purposes of enemy tactics, their name and description etc.
            </summary>
            <param name="actionOnEachImpulse">An action that will be performed on all kineticist impulses as they're created.</param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterNewSpell(System.String,System.Int32,System.Func{Dawnsbury.Core.CharacterBuilder.Spellcasting.SpellId,Dawnsbury.Core.Creatures.Creature,System.Int32,System.Boolean,Dawnsbury.Core.CharacterBuilder.FeatsDb.Spellbook.SpellInformation,Dawnsbury.Core.CombatActions.CombatAction})">
            <summary>
            Registers a new spell.  
            </summary>
            <param name="technicalSpellName">A unique identifier of this spell.</param>
            <param name="minimumSpellLevel">The minimum spell level of this spell. Use the minimum spell level "0" if this spell is a cantrip.</param>
            <param name="createSpellInstance">A factory method that creates a new instance of the spell. Make sure to create a new instance instead of always returning the same one. The arguments to the factory method are the AUTO-GENERATED ID (which you can use to refer to the spell in any created QEffects if you need to), the CASTER, the SPELL LEVEL this spell has been heightened to, and WHETHER THE INSTANCE IS USED IN COMBAT, as opposed to whether it's only to be shown in the character builder (you can use this property to hide parts of the description that are irrelevant during combat, such as heightening text). Use the method <see cref="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Spellbook.Spells.CreateModern(Dawnsbury.Display.Illustrations.Illustration,System.String,Dawnsbury.Core.Mechanics.Enumerations.Trait[],System.String,Dawnsbury.Core.StatBlocks.Description.DescriptionDescriptor,Dawnsbury.Core.Mechanics.Targeting.Target,System.Int32,Dawnsbury.Core.Mechanics.Core.SpellSavingThrow)"/> to create the base of the spell.</param>
            <returns>An auto-generated ID of the new spell.</returns>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterNewKineticistImpulse(System.String,System.Func{Dawnsbury.Core.CharacterBuilder.Feats.FeatName,Dawnsbury.Core.CombatActions.CombatAction})">
            <summary>
            Registers a new kineticist impulse.  
            </summary>
            <param name="technicalImpulseName">A unique identifier of this impulse. It will be used as the technical name of the impulse feat in save files, as well as the feat's display name.</param>
            <param name="createKineticistImpulseInstance">A factory method that creates a new instance of the impulse. Make sure to create a new instance instead of always returning the same one. The argument to the factory method is the AUTO-GENERATED FEAT NAME (which you should supply to the <see cref="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Kineticist.KineticistImpulses.CreateBasicImpulse(Dawnsbury.Core.CharacterBuilder.Feats.FeatName,Dawnsbury.Core.IllustrationName,Dawnsbury.Core.Mechanics.Enumerations.Trait[],System.Int32,System.String,System.String,Dawnsbury.Core.Mechanics.Targeting.Target)"/> method which you should use to create the impulse. In the factory method, you should call <see cref="M:Dawnsbury.Core.CharacterBuilder.FeatsDb.Kineticist.KineticistImpulses.CreateBasicImpulse(Dawnsbury.Core.CharacterBuilder.Feats.FeatName,Dawnsbury.Core.IllustrationName,Dawnsbury.Core.Mechanics.Enumerations.Trait[],System.Int32,System.String,System.String,Dawnsbury.Core.Mechanics.Targeting.Target)"/> to create a base for the impulse, adjust the returned combat action and return it.</param>
            <returns>An auto-generated ID of the new impulse.</returns>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterActionOnEachCharacterSheet(System.Action{Dawnsbury.Core.CharacterBuilder.CharacterSheet})">
            <summary>
            Registers an action that will be applied to each player character sheet during the Recalculate method just after the pre-level-1 choices are added (ancestry, background, class). You can use this to,
            for example, add extra choices to be made at some levels.
            </summary>
            <param name="addToEachCharacterSheet">An action that will be performed on each character sheet during its recalculation.</param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterActionOnEachCreature(System.Action{Dawnsbury.Core.Creatures.Creature})">
            <summary>
            Registers an action that will be applied to each creature in an encounter just before that encounter begins. This applies to both player character creatures and to enemies. You can use this to, for example,
            add extra QEffects to some or all creatures.
            </summary>
            <param name="applyToEachBeforeEncounterBegins"></param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterNewSoundEffect(System.String)">
            <summary>
            Registers a new sound effect file, and returns a new <see cref="T:Dawnsbury.Audio.SfxName"/> instance that can be used to play that sound. If the same filename is registered multiple times, only the first registration counts, and subsequent registrations will returns the same value.
            </summary>
            <param name="audioFilename">Name of the audio file, including relative path from the CustomMods folder and extension. For example, "AcidicBurst.wav" for a file in the CustomMods directory, or "AcidicBurstAssets/AcidicBurst.wav" for a file within the "AcidicBurstAssets" subfolder.</param>
            <returns></returns>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterEnumMember``1(System.String)">
            <summary>
            Registers a new unique value for an arbitrary enum. You can use this to add additional <see cref="T:Dawnsbury.Core.CombatActions.ActionId"/>s, <see cref="T:Dawnsbury.Core.Mechanics.QEffectId"/>s and other values.
            If you register them with this method they are guaranteed to be unique among all mods and they will be saved under their technical name rather than numerical ID
            so that they are properly serialized and deserialized in save files.
            </summary>
            <param name="technicalName">The string representation of the enum value.</param>
            <typeparam name="T">The enum type where you want to add an additional enum value.</typeparam>
            <returns>The new enum value.</returns>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterNewItemIntoTheShop(System.String,System.Func{Dawnsbury.Core.Mechanics.Treasure.ItemName,Dawnsbury.Core.Mechanics.Treasure.Item})">
            <summary>
            Registers a new item to be available in the shop. If the item is a weapon, then this will also add the +1 variant and the +1 striking variant of the weapon to the shop.
            </summary>
            <param name="technicalName">Name under which the item will be saved into character sheets and save files.</param>
            <param name="itemFactory">A producer that creates a new instance of the item. The ITEM NAME is the unique technical identifier assigned to the new item you're registering, and is the same value as what is returned from this method.</param>
            <returns>A unique identifier of the registered item.</returns>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterNewCreature(System.String,System.Func{Dawnsbury.Campaign.Encounters.Encounter,Dawnsbury.Core.Creatures.Creature})">
            <summary>
            Registers a new creature so that it can be used as an enemy in custom maps.
            </summary>
            <param name="creatureId">The ID by which maps can refer to this creature. If a tile in a Tiled tileset has this value in its Id property, then that tile represents that this creature should be placed on that tile.</param>
            <param name="creatureProducer">Function that creates a new instance of the creature for the given encounter (which may be null, and often you don't need to use it at all). This will usually just call the constructor of <see cref="T:Dawnsbury.Core.Creatures.Creature"/> to create a new creature instance.</param>
        </member>
        <member name="M:Dawnsbury.Modding.ModManager.RegisterCodeHook(System.String,System.Func{Dawnsbury.Core.TBattle,System.Threading.Tasks.Task})">
            <summary>
            Registers a piece of code that should be executed when a custom map's XML cutscene calls this hook using &lt;code hook="HookName" /&gt;
            </summary>
            <param name="hookName">Name of this code hook which will be referenced by an XML cutscene file.</param>
            <param name="code">The code to be executed when a cutscene file calls this code hook.</param>
        </member>
        <member name="T:Dawnsbury.Phases.Ingame.BattlePhase">
            <summary>
            This is the main in-battle in-game screen, which performs the draw/update loop during encounters and cutscenes.
            </summary>
        </member>
        <member name="T:Dawnsbury.ThirdParty.SteamApi.SteamWorkshopCodeMod">
            <summary>
            Information about a mod downloaded from the Steam Workshop.
            </summary>
        </member>
    </members>
</doc>
